if(progress == TRUE){
setTxtProgressBar(burn_progress, i)
}
}
#initializing matrices/storage objects for final Metropolis-Hasting
all_k_best = data.frame(matrix(ncol=(length(k_ends)-2),nrow=0))
if(fit_storage == TRUE){
bar_v = 0
bar_beta = 0
fit = 0
all_fits = data.frame()
all_MSE = data.frame()
}
all_BIC = data.frame()
accept_count = 0
#setting up counters for final Metropolis-Hasting
type = "0"
a.count <<- 0
s.count <<- 0
m.count <<- 0
j.count <<- 0
add.accept.count <<- 0
sub.accept.count <<- 0
move.accept.count <<- 0
jiggle.accept.count <<- 0
#setting up priors for beta draws
if(fit_storage == TRUE){
alt_arima<-function(full_data, ar){
tryCatch(arima(full_data[,2], method="ML", order=c(ar,0,0)), error = function(e) arima(full_data[,2], method="CSS", order=c(ar,0,0)))
}
model = alt_arima(full_data, ar)
fisher = solve(model$var.coef)
smiley = n * fisher
coef_list = model$coef[[length(model$coef)]]
for(a in 1:(length(model$coef)-1)){
coef_list = c(coef_list, model$coef[[a]], recursive=T)
}
b_0 = matrix(coef_list,(ar+1),1) #matrix of beta means for posterior draw
B_0 = smiley #variance-covariance matrix for posterior draw
#beta and sigma draw
post_beta_list = data.frame(Empty=rep(NA,(ar+1)))
post_sigma_list = data.frame(Empty=NA)
}
#getting constants for qs for final Metropolis-Hasting
starting_bkpts = length(k_ends) - 1 #most probable number of breakpoints based on starting info
starting_nfree = length(freeObservations(k_ends,ar))
starting_ttl = starting_bkpts + starting_nfree #total to get percentages
make_k = make_murder_p * (starting_nfree/starting_ttl) #proportion for make
murder_k = make_murder_p * (starting_bkpts/starting_ttl) #proportion for murder
if(progress == TRUE){
writeLines("\nBeginning sampling period.")
sample_progress <- txtProgressBar(min = 0, max = iterations, style = 3)
}
#Final Metroplis Hastings
for(i in 1:iterations){
old_loglik = fitMetrics(k_ends, full_data) #calls fit matrix to have a function to start with
k_and_q = newEnds(k_ends, make_k, murder_k)
k_ends_new = k_and_q[[1]]
q1 = k_and_q[[2]]
q2 = k_and_q[[3]]
type = k_and_q[[4]]
new_loglik = fitMetrics(k_ends_new, full_data)
delta_bic = (-2*new_loglik + log(n)*(length(k_ends_new)-1)*(3+ar)) - (-2*old_loglik + log(n)*(length(k_ends)-1)*(3+ar))
ratio = (-1*delta_bic/2) + (log(q1*dpois(length(k_ends_new)-2,lambda)) - log(q2*dpois(length(k_ends)-2,lambda)))
u_ratio = log(runif(1)) #random number from 0 to 1 taken from a uniform distribution and then log transformed
if(abs(delta_bic) == Inf){ #safe guard against random models creating infinite ratios
k_ends <<- k_ends #old
bic = (-2*old_loglik + log(n)*(length(k_ends)-1)*(3+ar))
} else if(ratio > u_ratio) {
k_ends <<- k_ends_new #new
bic = (-2*new_loglik + log(n)*(length(k_ends_new)-1)*(3+ar))
accept_count = accept_count + 1
#looking at what type of step is done and accepted
if(type == "add") {
add.accept.count <<- add.accept.count + 1
} else if(type == "sub") {
sub.accept.count <<- sub.accept.count + 1
} else if(type == "move") {
move.accept.count <<- move.accept.count + 1
} else if(type == "jiggle") {
jiggle.accept.count <<- jiggle.accept.count + 1
}
} else {
k_ends <<- k_ends #old
bic = (-2*old_loglik + log(n)*(length(k_ends)-1)*(3+ar))
}
k = k_ends[c(-1,-length(k_ends))]
if(length(k) > ncol(all_k_best)){
all_k_best = cbind(all_k_best, rep(NA,nrow(all_k_best)))
all_k_best = rbind(all_k_best, k)
}else if(length(k) < ncol(all_k_best)){
k = c(k, rep(NA, (ncol(all_k_best)-length(k))), recursive=T)
all_k_best = rbind(all_k_best, k)
}else{
all_k_best = rbind(all_k_best, k)
}
all_BIC = rbind(all_BIC, bic)
#setting up posterior
##loop through the k_ends to find the intervals
if(fit_storage == TRUE){
fit = NULL
squared_resids = NULL
current_post_betas = NULL
current_post_sigmas = NULL
for(m in 2:length(k_ends)) {
len = length(k_ends)
if(m > 2){
min = k_ends[m-1]+1
}else{
min = k_ends[m-1]
}
y_tp_values = NULL
for(a in 1:ar){
current_y_tp_values = full_data[c((min+ar-a):(k_ends[[m]]-ar+(ar-a))),2]
y_tp_length <<- length(current_y_tp_values)
y_tp_values = c(y_tp_values, current_y_tp_values, recursive=T)
}
x_j = matrix(c( rep(1, each=y_tp_length), y_tp_values, recursive=T), nrow=y_tp_length, ncol=(ar+1))
y_j = full_data[c((min+ar):k_ends[[m]]),2] #getting the y values in the interval
sigma = sd(y_j)
#bar_v
v = solve( (1/sigma) * (t(x_j) %*% x_j )+ solve(B_0) )
#bar_beta
beta = v %*% ( (1/sigma) * (t(x_j) %*% y_j) + solve(B_0) %*% b_0 )
#drawing a random variable from a multivariate normal pdf
post_beta = mvrnorm(1, beta, v)
predicted_x = x_j %*% post_beta
fit = c(fit, c(rep(NA, ar), predicted_x, recursive=T), recursive=T)
squared_resid = (predicted_x - y_j)^2
squared_resids = c(squared_resids, squared_resid, recursive=T)
bar_v = c(bar_v, v)
bar_beta = c(bar_beta, beta)
#SIGMA:
v0 = (max(k_ends))/2 + 2
d0 = 0 + .5 * t(y_j - x_j %*% post_beta ) %*% (y_j - x_j %*% post_beta)
sigma = rgamma(1, v0, rate = d0)
post_sigma = 1 / sigma
current_post_betas = cbind(current_post_betas, post_beta)
current_post_sigmas = cbind(current_post_sigmas, post_sigma)
if(m == len ) {
MSE = mean(squared_resids)
all_fits = rbind(all_fits, fit)
all_MSE = rbind(all_MSE, MSE)
current_post_betas = as.data.frame(current_post_betas)
colnames(current_post_betas) = c(1:ncol(current_post_betas))
post_beta_list = cbind(post_beta_list, current_post_betas)
colnames(current_post_sigmas) = c(1:ncol(current_post_sigmas))
post_sigma_list = cbind(post_sigma_list, current_post_sigmas)
}
}
}
if(progress == TRUE){
setTxtProgressBar(sample_progress, i)
}
}
if(progress == TRUE){
writeLines("\n")
}
#cleaning up the matrices and counts
colnames(all_k_best) = c(1:ncol(all_k_best))
final.propose = c(a.count, s.count, m.count, j.count)
final.accept = c(add.accept.count, sub.accept.count, move.accept.count, jiggle.accept.count)
colnames(all_BIC) = "BIC"
#cleaning up beta/sigma draws
if(fit_storage == TRUE){
colnames(all_MSE) = "MSE"
post_beta_list = post_beta_list[,-1]
post_sigma_list = post_sigma_list[,-1]
rownames(post_beta_list) = c(seq(0,ar,1))
rownames(post_beta_list) = paste("B", rownames(post_beta_list), sep = "")
rownames(post_sigma_list) = "Sigma"
split_num = NULL #initializing
for(i in 2:ncol(post_beta_list)){ #detecting where to split up columns in beta/sigma object
if(startsWith(colnames(post_beta_list)[i], "1.") == TRUE){
split_num = c(split_num, i)
}
}
final_beta_list = list() #initializing
for(i in 1:length(split_num)){ #splitting up columns in beta object
if(i == 1){ #betas from first run
final_beta_list[[i]] = post_beta_list[,1:(split_num[i]-1)]
colnames(final_beta_list[[i]]) = c(1:ncol(final_beta_list[[i]]))
}else if(i < length(split_num)){# betas from middle runs
final_beta_list[[i]] = post_beta_list[,split_num[i-1]:(split_num[i]-1)]
colnames(final_beta_list[[i]]) = c(1:ncol(final_beta_list[[i]]))
}else{ #betas from penultimate and final runs
final_beta_list[[i]] = post_beta_list[,split_num[i-1]:(split_num[i]-1)]
colnames(final_beta_list[[i]]) = c(1:ncol(final_beta_list[[i]]))
final_beta_list[[i+1]] = post_beta_list[,split_num[i]:ncol(post_beta_list)]
colnames(final_beta_list[[i+1]]) = c(1:ncol(final_beta_list[[i+1]]))
}
}
post_beta_list = final_beta_list #saving final version of beta object
final_sigma_list = list() #initializing
for(i in 1:length(split_num)){ #splitting up columns in sigma object
if(i == 1){ #sigmas from first run
final_sigma_list[[i]] = post_sigma_list[,1:(split_num[i]-1)]
colnames(final_sigma_list[[i]]) = c(1:ncol(final_sigma_list[[i]]))
}else if(i < length(split_num)){# sigmas from middle runs
final_sigma_list[[i]] = post_sigma_list[,split_num[i-1]:(split_num[i]-1)]
colnames(final_sigma_list[[i]]) = c(1:ncol(final_sigma_list[[i]]))
}else{ #sigma from penultimate and final runs
final_sigma_list[[i]] = post_sigma_list[,split_num[i-1]:(split_num[i]-1)]
colnames(final_sigma_list[[i]]) = c(1:ncol(final_sigma_list[[i]]))
final_sigma_list[[i+1]] = post_sigma_list[,split_num[i]:ncol(post_sigma_list)]
colnames(final_sigma_list[[i+1]]) = c(1:ncol(final_sigma_list[[i+1]]))
}
}
post_sigma_list = final_sigma_list #saving final version of sigma object
}
#getting distribution of k (number of breakpoints)
num_bkpts = list()
for(i in 1:iterations){
current_k = length(all_k_best[i,][!is.na(all_k_best[i,])])
num_bkpts = c(num_bkpts, current_k, recursive=T)
}
if(fit_storage == TRUE){
final_list = list(accept_count / iterations, final.propose, final.accept, all_MSE, all_BIC, all_k_best, num_bkpts, post_beta_list, post_sigma_list, all_fits)
names(final_list) = c("AcceptRate", "ProposedSteps", "AcceptedSteps", "MSE", "BIC", "Breakpoints", "NumBkpts", "Beta", "Sigma", "Fits")
}else{
final_list = list(accept_count / iterations, final.propose, final.accept, all_BIC, all_k_best, num_bkpts)
names(final_list) = c("AcceptRate", "ProposedSteps", "AcceptedSteps", "BIC", "Breakpoints", "NumBkpts")
}
return(final_list)
}
first = rnorm(100, mean = 10, sd = 5)
second = rnorm(100, mean = 20, sd = 5)
third = rnorm(100, mean = 30, sd = 5)
data_44 = c(first, second,third)
time = c(1:300)
test_data_44 = data.frame(time, data_44)
current_result = baar(c(100,200), test_data_44[,1], test_data_44[,2], 10000, 1500, jump=0.25, ar=1, progress=T, fit_storage=T)
plot(test_data_44, main = "Two Breaks with High Variance", xlab="Time", ylab="Dependent Variable", pch=16)
hist(current_result$NumBkpts,xlim=c(0,3), breaks = c(0.5,1.5,2.5),xaxp=c(0, 3, 3), xlab="Time", ylab="Number of Iterations (out of 10,000)", main="Distribution of Number of Breakpoints", col="#006e82")
hist(finbkpts, breaks = c(1:300), xlim=c(0,300), ylim=c(0,10000), right=F, xlab="Time", ylab="Number of Iterations (out of 10,000)", main="Distribution of Breakpoint Locations", col="#006e82")
current_data <- test_data_44[,2] #EDIT HERE! vector of true data points
color <- "#006e82" #EDIT HERE! color to use for results
finbkpts<-NULL
if(is.atomic(current_result$Breakpoints) == T){
finbkpts=na.omit(current_result$Breakpoints)
}else{
for(i in 1:ncol(current_result$Breakpoints)){
finbkpts<-c(finbkpts, na.omit(current_result$Breakpoints[,i]), recursive=T)
}
}
offset <- 0
finbkpts <- finbkpts+offset
hist(finbkpts, breaks=c(1:200), xlim = c(1,200), ylim=c(0,length(current_result$BIC[,1])), right=F, xlab="Time", ylab="Number of Iterations", main="Distribution of Breakpoint Locations", col=color)
hist(finbkpts, breaks = c(1:300), xlim=c(0,300), ylim=c(0,10000), right=F, xlab="Time", ylab="Number of Iterations (out of 10,000)", main="Distribution of Breakpoint Locations", col="#006e82")
fits_to_use = current_result$Fits[which(current_result$Breakpoints[,1] == 100 & current_result$Breakpoints[,2] == 200 & current_result$NumBkpts == 2),]
points(c(1:100),colMeans(fits_to_use)[1:100], col="#00a0fa", pch=17)
lines(c(1:100),colMeans(fits_to_use)[1:100], col="#00a0fa", lty=2)
plot(test_data_44, main = "Two Breaks with High Variance", xlab="Time", ylab="Dependent Variable", pch=16)
points(c(1:100),colMeans(fits_to_use)[1:100], col="#00a0fa", pch=17)
lines(c(1:100),colMeans(fits_to_use)[1:100], col="#00a0fa", lty=2)
points(c(101:200),colMeans(fits_to_use)[101:200], col="#0ab45a", pch=18)
lines(c(101:200),colMeans(fits_to_use)[101:200], col="#0ab45a", lty=2)
points(c(201:300),colMeans(fits_to_use)[201:300], col="purple", pch=18)
lines(c(201:300),colMeans(fits_to_use)[201:300], col="purple", lty=2)
beta_to_use = pelican_result$Beta[which(pelican_result$Breakpoints[,1] == 11 & pelican_result$NumBkpts == 1)]
sigma_to_use = pelican_result$Sigma[which(pelican_result$Breakpoints[,1] == 11 & pelican_result$NumBkpts == 1)]
beta_to_use = current_result$Beta[which(current_result$Breakpoints[,1] == 100 & current_result$Breakpoints[,2] == 200 & current_result$NumBkpts == 2)]
sigma_to_use = current_result$Sigma[which(current_result$Breakpoints[,1] == 100 & current_result$Breakpoints[,2] == 200 & current_result$NumBkpts == 2)]
fits_to_use = current_result$Fits[which(current_result$Breakpoints[,1] == 100 & current_result$Breakpoints[,2] == 200 & current_result$NumBkpts == 2),]
lower = apply(fits_to_use, 2, quantile, probs = 0.025, na.rm = T)
upper = apply(fits_to_use, 2, quantile, probs = 0.975, na.rm = T)
beta_to_use = current_result$Beta[which(current_result$Breakpoints[,1] == 100 & current_result$Breakpoints[,2] == 200 & current_result$NumBkpts == 2)]
sigma_to_use = current_result$Sigma[which(current_result$Breakpoints[,1] == 100 & current_result$Breakpoints[,2] == 200 & current_result$NumBkpts == 2)]
fits_to_use = current_result$Fits[which(current_result$Breakpoints[,1] == 100 & current_result$Breakpoints[,2] == 200 & current_result$NumBkpts == 2),]
lower = apply(fits_to_use, 2, quantile, probs = 0.025, na.rm = T)
upper = apply(fits_to_use, 2, quantile, probs = 0.975, na.rm = T)
par(mfrow=c(1,2))
plot(test_data_44, main = "Two Breaks with High Variance", xlab="Time", ylab="Dependent Variable", pch=16)
points(c(1:100),colMeans(fits_to_use)[1:100], col="#00a0fa", pch=17)
lines(c(1:100),colMeans(fits_to_use)[1:100], col="#00a0fa", lty=2)
points(c(101:200),colMeans(fits_to_use)[101:200], col="#0ab45a", pch=18)
lines(c(101:200),colMeans(fits_to_use)[101:200], col="#0ab45a", lty=2)
points(c(201:300),colMeans(fits_to_use)[201:300], col="purple", pch=18)
lines(c(201:300),colMeans(fits_to_use)[201:300], col="purple", lty=2)
plot(test_data_44, main = "Two Breaks with High Variance", xlab="Time", ylab="Dependent Variable", pch=16)
points(c(1:100),colMeans(fits_to_use)[1:100], col="#00a0fa", pch=17)
lines(c(1:100),colMeans(fits_to_use)[1:100], col="#00a0fa", lty=2)
points(c(101:200),colMeans(fits_to_use)[101:200], col="#0ab45a", pch=18)
lines(c(101:200),colMeans(fits_to_use)[101:200], col="#0ab45a", lty=2)
points(c(201:300),colMeans(fits_to_use)[201:300], col="purple", pch=18)
lines(c(201:300),colMeans(fits_to_use)[201:300], col="purple", lty=2)
lines(c(1:100),lower[1:100], col="#00a0fa", lty=3)
lines(c(1:100),lower[1:100], col="#0ab45a", lty=3)
lines(c(100:200),upper[100:200], col="#00a0fa", lty=3)
lines(c(100:200),upper[100:200], col="#0ab45a", lty=3)
lines(c(200:300),upper[200:300], col="#purple", lty=3)
lines(c(200:300),upper[200:300], col="#purple", lty=3)
plot(test_data_300, main = "One Break with High Variances", xlab="Time", ylab="Dependent Variable", pch=16)
lines(c(200:300),upper[200:300], col="#purple", lty=3)
par(mfrow=c(1,2))
plot(test_data_44, main = "Two Breaks with High Variance", xlab="Time", ylab="Dependent Variable", pch=16)
points(c(1:100),colMeans(fits_to_use)[1:100], col="#00a0fa", pch=17)
lines(c(1:100),colMeans(fits_to_use)[1:100], col="#00a0fa", lty=2)
points(c(101:200),colMeans(fits_to_use)[101:200], col="#0ab45a", pch=18)
lines(c(101:200),colMeans(fits_to_use)[101:200], col="#0ab45a", lty=2)
points(c(201:300),colMeans(fits_to_use)[201:300], col="purple", pch=18)
lines(c(201:300),colMeans(fits_to_use)[201:300], col="purple", lty=2)
plot(test_data_44, main = "Two Breaks with High Variance", xlab="Time", ylab="Dependent Variable", pch=16)
points(c(1:100),colMeans(fits_to_use)[1:100], col="#00a0fa", pch=17)
lines(c(1:100),colMeans(fits_to_use)[1:100], col="#00a0fa", lty=2)
points(c(101:200),colMeans(fits_to_use)[101:200], col="#0ab45a", pch=18)
lines(c(101:200),colMeans(fits_to_use)[101:200], col="#0ab45a", lty=2)
points(c(201:300),colMeans(fits_to_use)[201:300], col="purple", pch=18)
lines(c(201:300),colMeans(fits_to_use)[201:300], col="purple", lty=2)
lines(c(1:100),lower[1:100], col="#00a0fa", lty=3)
lines(c(1:100),lower[1:100], col="#0ab45a", lty=3)
par(mfrow=c(1,2))
plot(test_data_44, main = "Two Breaks with High Variance", xlab="Time", ylab="Dependent Variable", pch=16)
points(c(1:100),colMeans(fits_to_use)[1:100], col="#00a0fa", pch=17)
lines(c(1:100),colMeans(fits_to_use)[1:100], col="#00a0fa", lty=2)
points(c(101:200),colMeans(fits_to_use)[101:200], col="#0ab45a", pch=18)
lines(c(101:200),colMeans(fits_to_use)[101:200], col="#0ab45a", lty=2)
points(c(201:300),colMeans(fits_to_use)[201:300], col="purple", pch=18)
lines(c(201:300),colMeans(fits_to_use)[201:300], col="purple", lty=2)
plot(test_data_44, main = "Two Breaks with High Variance", xlab="Time", ylab="Dependent Variable", pch=16)
points(c(1:100),colMeans(fits_to_use)[1:100], col="#00a0fa", pch=17)
lines(c(1:100),colMeans(fits_to_use)[1:100], col="#00a0fa", lty=2)
points(c(101:200),colMeans(fits_to_use)[101:200], col="#0ab45a", pch=18)
lines(c(101:200),colMeans(fits_to_use)[101:200], col="#0ab45a", lty=2)
points(c(201:300),colMeans(fits_to_use)[201:300], col="purple", pch=18)
lines(c(201:300),colMeans(fits_to_use)[201:300], col="purple", lty=2)
lines(c(201:300),colMeans(fits_to_use)[201:300], col="purple", lty=2)
lines(c(1:100),lower[1:100], col="#00a0fa", lty=3)
lines(c(101:200),lower[101:200], col="#0ab45a", lty=3)
lines(c(201:300),lower[201:300], col="#0ab45a", lty=3)
lines(c(1:100),upper[1:100], col="#00a0fa", lty=3)
lines(c(101:200),upper[101:200], col="#0ab45a", lty=3)
lines(c(201:300),upper[201:300], col="#purple", lty=3)
plot(test_data_44, main = "Two Breaks with High Variance", xlab="Time", ylab="Dependent Variable", pch=16)
points(c(1:100),colMeans(fits_to_use)[1:100], col="#00a0fa", pch=17)
lines(c(1:100),colMeans(fits_to_use)[1:100], col="#00a0fa", lty=2)
points(c(101:200),colMeans(fits_to_use)[101:200], col="#0ab45a", pch=18)
lines(c(101:200),colMeans(fits_to_use)[101:200], col="#0ab45a", lty=2)
points(c(201:300),colMeans(fits_to_use)[201:300], col="purple", pch=18)
lines(c(201:300),colMeans(fits_to_use)[201:300], col="purple", lty=2)
lines(c(1:100),lower[1:100], col="#00a0fa", lty=3)
lines(c(101:200),lower[101:200], col="#0ab45a", lty=3)
lines(c(201:300),lower[201:300], col="#purple", lty=3)
lines(c(1:100),upper[1:100], col="#00a0fa", lty=3)
lines(c(101:200),upper[101:200], col="#0ab45a", lty=3)
lines(c(201:300),upper[201:300], col="#purple", lty=3)
lines(c(201:300),upper[201:300], col="#purple", lty=3)
lines(c(201:300),lower[201:300], col="#purple", lty=3)
lower = apply(fits_to_use, 3, quantile, probs = 0.025, na.rm = T)
beta_to_use = current_result$Beta[which(current_result$Breakpoints[,1] == 100 & current_result$Breakpoints[,2] == 200 & current_result$NumBkpts == 2)]
sigma_to_use = current_result$Sigma[which(current_result$Breakpoints[,1] == 100 & current_result$Breakpoints[,2] == 200 & current_result$NumBkpts == 2)]
fits_to_use = current_result$Fits[which(current_result$Breakpoints[,1] == 100 & current_result$Breakpoints[,2] == 200 & current_result$NumBkpts == 2),]
lower = apply(fits_to_use, 3, quantile, probs = 0.025, na.rm = T)
par(mfrow=c(1,1))
lower = apply(fits_to_use, 2, quantile, probs = 0.025, na.rm = T)
upper = apply(fits_to_use, 2, quantile, probs = 0.975, na.rm = T)
plot(test_data_44, main = "Two Breaks with High Variance", xlab="Time", ylab="Dependent Variable", pch=16)
points(c(1:100),colMeans(fits_to_use)[1:100], col="#00a0fa", pch=17)
lines(c(1:100),colMeans(fits_to_use)[1:100], col="#00a0fa", lty=2)
points(c(101:200),colMeans(fits_to_use)[101:200], col="#0ab45a", pch=18)
lines(c(101:200),colMeans(fits_to_use)[101:200], col="#0ab45a", lty=2)
points(c(201:300),colMeans(fits_to_use)[201:300], col="purple", pch=18)
lines(c(201:300),colMeans(fits_to_use)[201:300], col="purple", lty=2)
lines(c(1:100),lower[1:100], col="#00a0fa", lty=3)
lines(c(101:200),lower[101:200], col="#0ab45a", lty=3)
lines(c(201:300),lower[201:300], col="#purple", lty=3)
lines(c(1:100),upper[1:100], col="#00a0fa", lty=3)
lines(c(101:200),upper[101:200], col="#0ab45a", lty=3)
lines(c(201:300),upper[201:300], col="#purple", lty=3)
plot(test_data_44, main = "Two Breaks with High Variance", xlab="Time", ylab="Dependent Variable", pch=16)
points(c(1:100),colMeans(fits_to_use)[1:100], col="#00a0fa", pch=17)
lines(c(1:100),colMeans(fits_to_use)[1:100], col="#00a0fa", lty=2)
points(c(101:200),colMeans(fits_to_use)[101:200], col="#0ab45a", pch=18)
lines(c(101:200),colMeans(fits_to_use)[101:200], col="#0ab45a", lty=2)
points(c(201:300),colMeans(fits_to_use)[201:300], col="purple", pch=18)
lines(c(201:300),colMeans(fits_to_use)[201:300], col="purple", lty=2)
lines(c(1:100),lower[1:100], col="#00a0fa", lty=3)
lines(c(101:200),lower[101:200], col="#0ab45a", lty=3)
lines(c(201:300),lower[201:300], col="purple", lty=3)
lines(c(1:100),upper[1:100], col="#00a0fa", lty=3)
lines(c(101:200),upper[101:200], col="#0ab45a", lty=3)
lines(c(201:300),upper[201:300], col="purple", lty=3)
par(mfrow=c(1,2))
plot(test_data_44, main = "Two Breaks with High Variance", xlab="Time", ylab="Dependent Variable", pch=16)
points(c(1:100),colMeans(fits_to_use)[1:100], col="#00a0fa", pch=17)
lines(c(1:100),colMeans(fits_to_use)[1:100], col="#00a0fa", lty=2)
points(c(101:200),colMeans(fits_to_use)[101:200], col="#0ab45a", pch=18)
lines(c(101:200),colMeans(fits_to_use)[101:200], col="#0ab45a", lty=2)
points(c(201:300),colMeans(fits_to_use)[201:300], col="purple", pch=18)
lines(c(201:300),colMeans(fits_to_use)[201:300], col="purple", lty=2)
plot(test_data_44, main = "Two Breaks with High Variance", xlab="Time", ylab="Dependent Variable", pch=16)
points(c(1:100),colMeans(fits_to_use)[1:100], col="#00a0fa", pch=17)
lines(c(1:100),colMeans(fits_to_use)[1:100], col="#00a0fa", lty=2)
points(c(101:200),colMeans(fits_to_use)[101:200], col="#0ab45a", pch=18)
lines(c(101:200),colMeans(fits_to_use)[101:200], col="#0ab45a", lty=2)
points(c(201:300),colMeans(fits_to_use)[201:300], col="purple", pch=18)
lines(c(201:300),colMeans(fits_to_use)[201:300], col="purple", lty=2)
lines(c(1:100),lower[1:100], col="#00a0fa", lty=3)
lines(c(101:200),lower[101:200], col="#0ab45a", lty=3)
lines(c(201:300),lower[201:300], col="purple", lty=3)
lines(c(1:100),upper[1:100], col="#00a0fa", lty=3)
lines(c(101:200),upper[101:200], col="#0ab45a", lty=3)
lines(c(201:300),upper[201:300], col="purple", lty=3)
par(mfrow=c(1,2))
plot(test_data_44, main = "Simulated Data: BAAR Fits", xlab="Time", ylab="Dependent Variable", pch=16)
points(c(1:100),colMeans(fits_to_use)[1:100], col="#00a0fa", pch=17)
lines(c(1:100),colMeans(fits_to_use)[1:100], col="#00a0fa", lty=2)
points(c(101:200),colMeans(fits_to_use)[101:200], col="#0ab45a", pch=18)
lines(c(101:200),colMeans(fits_to_use)[101:200], col="#0ab45a", lty=2)
points(c(201:300),colMeans(fits_to_use)[201:300], col="purple", pch=18)
lines(c(201:300),colMeans(fits_to_use)[201:300], col="purple", lty=2)
plot(test_data_44, main = "Simulated Data: BAAR Fits with Quantiles", xlab="Time", ylab="Dependent Variable", pch=16)
points(c(1:100),colMeans(fits_to_use)[1:100], col="#00a0fa", pch=17)
lines(c(1:100),colMeans(fits_to_use)[1:100], col="#00a0fa", lty=2)
points(c(101:200),colMeans(fits_to_use)[101:200], col="#0ab45a", pch=18)
lines(c(101:200),colMeans(fits_to_use)[101:200], col="#0ab45a", lty=2)
points(c(201:300),colMeans(fits_to_use)[201:300], col="purple", pch=18)
lines(c(201:300),colMeans(fits_to_use)[201:300], col="purple", lty=2)
lines(c(1:100),lower[1:100], col="#00a0fa", lty=3)
lines(c(101:200),lower[101:200], col="#0ab45a", lty=3)
lines(c(201:300),lower[201:300], col="purple", lty=3)
lines(c(1:100),upper[1:100], col="#00a0fa", lty=3)
lines(c(101:200),upper[101:200], col="#0ab45a", lty=3)
lines(c(201:300),upper[201:300], col="purple", lty=3)
armina_1 = arima(test_data_44)
arima?
?arima
armina_1 = arima(test_data_44[,2],order=c(1,0,0))
armina_1$BIC
BIC(armina_1)
current_result$BIC[which(current_result$Breakpoints[,1] == 100 & current_result$Breakpoints[,2] == 200)]
current_result$BIC[which(current_result$Breakpoints[,1] == 100 & current_result$Breakpoints[,2] == 200),]
min_arima
min_arima = min(current_result$BIC[which(current_result$Breakpoints[,1] == 100 & current_result$Breakpoints[,2] == 200),])
min_arima
dif = BIC(arima_1) - min_arima
arima_1 = arima(test_data_44[,2],order=c(1,0,0))
BIC(arima_1)
min_arima = min(current_result$BIC[which(current_result$Breakpoints[,1] == 100 & current_result$Breakpoints[,2] == 200),])
min_arima
dif = BIC(arima_1) - min_arima
dif
BIC(arima_1)
min_arima
dif
graphics.off()
plot(test_data_44, main = "Simulated Data: BAAR Fits with Quantiles", xlab="Time", ylab="Dependent Variable", pch=16)
points(c(1:100),colMeans(fits_to_use)[1:100], col="#00a0fa", pch=17)
lines(c(1:100),colMeans(fits_to_use)[1:100], col="#00a0fa", lty=2)
points(c(101:200),colMeans(fits_to_use)[101:200], col="#0ab45a", pch=18)
lines(c(101:200),colMeans(fits_to_use)[101:200], col="#0ab45a", lty=2)
points(c(201:300),colMeans(fits_to_use)[201:300], col="purple", pch=18)
lines(c(201:300),colMeans(fits_to_use)[201:300], col="purple", lty=2)
lines(c(1:100),lower[1:100], col="#00a0fa", lty=3)
lines(c(101:200),lower[101:200], col="#0ab45a", lty=3)
lines(c(201:300),lower[201:300], col="purple", lty=3)
lines(c(1:100),upper[1:100], col="#00a0fa", lty=3)
lines(c(101:200),upper[101:200], col="#0ab45a", lty=3)
lines(c(201:300),upper[201:300], col="purple", lty=3)
plot(test_data_44, main = "Simulated Data: BAAR Fits with Quantiles", xlab="Time", ylab="Dependent Variable", pch=16)
points(c(1:100),colMeans(fits_to_use)[1:100], col="#00a0fa", pch=17)
lines(c(1:100),colMeans(fits_to_use)[1:100], col="#00a0fa", lty=2)
points(c(101:200),colMeans(fits_to_use)[101:200], col="#0ab45a", pch=18)
lines(c(101:200),colMeans(fits_to_use)[101:200], col="#0ab45a", lty=2)
points(c(201:300),colMeans(fits_to_use)[201:300], col="purple", pch=18)
lines(c(201:300),colMeans(fits_to_use)[201:300], col="purple", lty=2)
lines(c(1:100),lower[1:100], col="#00a0fa", lty=3, lwd=3)
lines(c(101:200),lower[101:200], col="#0ab45a", lty=3)
lines(c(201:300),lower[201:300], col="purple", lty=3)
lines(c(1:100),upper[1:100], col="#00a0fa", lty=3)
lines(c(101:200),upper[101:200], col="#0ab45a", lty=3)
lines(c(201:300),upper[201:300], col="purple", lty=3)
plot(test_data_44, main = "Simulated Data: BAAR Fits with Quantiles", xlab="Time", ylab="Dependent Variable", pch=16)
points(c(1:100),colMeans(fits_to_use)[1:100], col="#00a0fa", pch=17)
lines(c(1:100),colMeans(fits_to_use)[1:100], col="#00a0fa", lty=2)
points(c(101:200),colMeans(fits_to_use)[101:200], col="#0ab45a", pch=18)
lines(c(101:200),colMeans(fits_to_use)[101:200], col="#0ab45a", lty=2)
points(c(201:300),colMeans(fits_to_use)[201:300], col="purple", pch=18)
lines(c(201:300),colMeans(fits_to_use)[201:300], col="purple", lty=2)
lines(c(1:100),lower[1:100], col="#00a0fa", lty=3, lwd=4)
lines(c(101:200),lower[101:200], col="#0ab45a", lty=3, lwd=4)
lines(c(201:300),lower[201:300], col="purple", lty=3)
lines(c(1:100),upper[1:100], col="#00a0fa", lty=3)
lines(c(101:200),upper[101:200], col="#0ab45a", lty=3)
lines(c(201:300),upper[201:300], col="purple", lty=3)
plot(test_data_44, main = "Simulated Data: BAAR Fits with Quantiles", xlab="Time", ylab="Dependent Variable", pch=16, cex=0.5)
plot(test_data_44, main = "Simulated Data: BAAR Fits with Quantiles", xlab="Time", ylab="Dependent Variable", pch=16, cex=0.5)
points(c(1:100),colMeans(fits_to_use)[1:100], col="#00a0fa", pch=17, cex=0.5)
lines(c(1:100),colMeans(fits_to_use)[1:100], col="#00a0fa", lty=2)
points(c(101:200),colMeans(fits_to_use)[101:200], col="#0ab45a", pch=18, cex=0.5)
lines(c(101:200),colMeans(fits_to_use)[101:200], col="#0ab45a", lty=2)
points(c(201:300),colMeans(fits_to_use)[201:300], col="purple", pch=18, cex=0.5)
lines(c(201:300),colMeans(fits_to_use)[201:300], col="purple", lty=2)
lines(c(1:100),lower[1:100], col="#00a0fa", lty=3, lwd=4)
lines(c(101:200),lower[101:200], col="#0ab45a", lty=3, lwd=4)
lines(c(201:300),lower[201:300], col="purple", lty=3)
lines(c(1:100),upper[1:100], col="#00a0fa", lty=3)
lines(c(101:200),upper[101:200], col="#0ab45a", lty=3)
lines(c(201:300),upper[201:300], col="purple", lty=3)
plot(test_data_44, main = "Simulated Data: BAAR Fits with Quantiles", xlab="Time", ylab="Dependent Variable", pch=16, cex=0.5)
points(c(1:100),colMeans(fits_to_use)[1:100], col="#00a0fa", pch=17, cex=0.5)
lines(c(1:100),colMeans(fits_to_use)[1:100], col="#00a0fa", lty=2)
points(c(101:200),colMeans(fits_to_use)[101:200], col="#0ab45a", pch=18, cex=0.5)
lines(c(101:200),colMeans(fits_to_use)[101:200], col="#0ab45a", lty=2)
points(c(201:300),colMeans(fits_to_use)[201:300], col="purple", pch=18, cex=0.5)
lines(c(201:300),colMeans(fits_to_use)[201:300], col="purple", lty=2)
lines(c(1:100),lower[1:100], col="#00a0fa", lty=3)
lines(c(101:200),lower[101:200], col="#0ab45a", lty=3)
lines(c(201:300),lower[201:300], col="purple", lty=3)
lines(c(1:100),upper[1:100], col="#00a0fa", lty=3)
lines(c(101:200),upper[101:200], col="#0ab45a", lty=3)
lines(c(201:300),upper[201:300], col="purple", lty=3)
