q2 = k_and_q[[3]]
type = k_and_q[[4]]
new_loglik = fitMetrics(k_ends_new, full_data)
delta_bic = (-2*new_loglik + log(n)*(length(k_ends_new)-1)*(3+1)) - (-2*old_loglik + log(n)*(length(k_ends)-1)*(3+1))
ratio = (-1*delta_bic/2) + (log(q1*dpois(length(k_ends_new)-2,lambda)) - log(q2*dpois(length(k_ends)-2,lambda)))
u_ratio = log(runif(1)) #random number from 0 to 1 taken from a uniform distribution and then log transformed
if(abs(delta_bic) == Inf){ #safe guard against random models creating infinite ratios
k_ends <<- k_ends #old
bic = (-2*old_loglik + log(n)*(length(k_ends)-1)*(3+1))
} else if(ratio > u_ratio) {
k_ends <<- k_ends_new #new
bic = (-2*new_loglik + log(n)*(length(k_ends_new)-1)*(3+1))
accept_count = accept_count + 1
#looking at what type of step is done and accepted
if(type == "add") {
add.accept.count <<- add.accept.count + 1
} else if(type == "sub") {
sub.accept.count <<- sub.accept.count + 1
} else if(type == "move") {
move.accept.count <<- move.accept.count + 1
} else if(type == "jiggle") {
jiggle.accept.count <<- jiggle.accept.count + 1
}
} else {
k_ends <<- k_ends #old
bic = (-2*old_loglik + log(n)*(length(k_ends)-1)*(3+1))
}
#condensing the data
k_ends_best_print = c(k_ends, rep(NA, (n/3)-length(k_ends)))
all_k_best = rbind(all_k_best, k_ends_best_print)
all_BIC = rbind(all_BIC, bic)
#setting up posterior
##loop through the k_ends to find the intervals
fit = NULL
current_post_betas = NULL
current_post_sigmas = NULL
for(m in 2:length(k_ends)) {
len = length(k_ends)
if(m > 2){
min = k_ends[m-1]+1
}else{
min = k_ends[m-1]
}
x_values = full_data[c(min:k_ends[m]),1] #getting the x values in the interval
x_j = matrix(c( rep(1, each=length(x_values)), x_values), nrow= length(x_values), ncol= 2)
y_j = full_data[c(min:k_ends[m]),2] #getting the y values in the interval
sigma = sd(y_j)
#bar_v
v = solve( (1/sigma) * (t(x_j) %*% x_j )+ solve(B_0) )
#bar_beta
beta = v %*% ( (1/sigma) * (t(x_j) %*% y_j) + solve(B_0) %*% b_0 )
predicted_x = x_j %*% beta
fit = c(fit, predicted_x)
#drawing a random variable from a multivariate normal pdf
post_beta = mvrnorm(1, beta, v)
bar_v = c(bar_v, v)
bar_beta = c(bar_beta, beta)
#SIGMA:
v0 = (max(k_ends))/2 + 2
d0 = 0 + .5 * t(y_j - x_j %*% post_beta ) %*% (y_j - x_j %*% post_beta)
sigma = rgamma(1, v0, rate = d0)
post_sigma = 1 / sigma
current_post_betas = cbind(current_post_betas, post_beta)
current_post_sigmas = cbind(current_post_sigmas, post_sigma)
if(m == len ) {
MSE = mean((full_data[,2]-fit)^2)
all_MSE = rbind(all_MSE, MSE)
current_post_betas = as.data.frame(current_post_betas)
colnames(current_post_betas) = c(1:ncol(current_post_betas))
post_beta_list = cbind(post_beta_list, current_post_betas)
colnames(current_post_sigmas) = c(1:ncol(current_post_sigmas))
post_sigma_list = cbind(post_sigma_list, current_post_sigmas)
}
}
}
#cleaning up the matrices
all_k_best = all_k_best[-1,colSums(is.na(all_k_best))<nrow(all_k_best)]
clean_max = max(all_k_best[1,], na.rm=TRUE)
all_k_best = ifelse(all_k_best == clean_max,NA,all_k_best)
all_k_best = data.frame(all_k_best[,c(-1,-ncol(all_k_best))], row.names=NULL)
post_beta_list = post_beta_list[,-1]
post_sigma_list = post_sigma_list[,-1]
colnames(all_MSE) = "MSE"
colnames(all_BIC) = "BIC"
rownames(post_beta_list) = c("B0", "B1")
rownames(post_sigma_list) = "Sigma"
final.propose = c(a.count, s.count, m.count, j.count)
final.accept = c(add.accept.count, sub.accept.count, move.accept.count, jiggle.accept.count)
#getting distribution of k (number of breakpoints)
num_bkpts = list()
for(i in 1:iterations){
current_k = length(all_k_best[i,][!is.na(all_k_best[i,])])
num_bkpts = c(num_bkpts, current_k, recursive=T)
}
split_num = NULL #initializing
for(i in 2:ncol(post_beta_list)){ #detecting where to split up columns in beta/sigma object
if(startsWith(colnames(post_beta_list)[i], "1.") == TRUE){
split_num = c(split_num, i)
}
}
final_beta_list = list() #initializing
for(i in 1:length(split_num)){ #splitting up columns in beta object
if(i == 1){ #betas from first run
final_beta_list[[i]] = post_beta_list[,1:(split_num[i]-1)]
colnames(final_beta_list[[i]]) = c(1:ncol(final_beta_list[[i]]))
}else if(i < length(split_num)){# betas from middle runs
final_beta_list[[i]] = post_beta_list[,split_num[i-1]:(split_num[i]-1)]
colnames(final_beta_list[[i]]) = c(1:ncol(final_beta_list[[i]]))
}else{ #betas from penultimate and final runs
final_beta_list[[i]] = post_beta_list[,split_num[i-1]:(split_num[i]-1)]
colnames(final_beta_list[[i]]) = c(1:ncol(final_beta_list[[i]]))
final_beta_list[[i+1]] = post_beta_list[,split_num[i]:ncol(post_beta_list)]
colnames(final_beta_list[[i+1]]) = c(1:ncol(final_beta_list[[i+1]]))
}
}
post_beta_list = final_beta_list #saving final version of beta object
final_sigma_list = list() #initializing
for(i in 1:length(split_num)){ #splitting up columns in sigma object
if(i == 1){ #sigmas from first run
final_sigma_list[[i]] = post_sigma_list[,1:(split_num[i]-1)]
colnames(final_sigma_list[[i]]) = c(1:ncol(final_sigma_list[[i]]))
}else if(i < length(split_num)){# sigmas from middle runs
final_sigma_list[[i]] = post_sigma_list[,split_num[i-1]:(split_num[i]-1)]
colnames(final_sigma_list[[i]]) = c(1:ncol(final_sigma_list[[i]]))
}else{ #sigma from penultimate and final runs
final_sigma_list[[i]] = post_sigma_list[,split_num[i-1]:(split_num[i]-1)]
colnames(final_sigma_list[[i]]) = c(1:ncol(final_sigma_list[[i]]))
final_sigma_list[[i+1]] = post_sigma_list[,split_num[i]:ncol(post_sigma_list)]
colnames(final_sigma_list[[i+1]]) = c(1:ncol(final_sigma_list[[i+1]]))
}
}
post_sigma_list = final_sigma_list #saving final version of sigma object
final_list = list(accept_count / iterations, final.propose, final.accept, all_MSE, all_BIC, all_k_best, num_bkpts, post_beta_list, post_sigma_list)
names(final_list) = c("AcceptRate", "ProposedSteps", "AcceptedSteps", "MSE", "BIC", "Breakpoints", "NumBkpts", "Beta", "Sigma")
return(final_list)
}
#calling the function
test_data = test_data_2()
bkpts = breakpoints(test_data[,2]~test_data[,1])
current_result = balr(bkpts$breakpoints, test_data[,1], test_data[,2], 100, 50)
hist(current_result$NumBkpts)
current_result$Beta
pelican<-read.csv("pacificBrownPelican.csv")
pelican<-pelican[-which(pelican$NumberByPartyHours == 0),]
setwd("C:\Users\sarah\REU2018\test_Cases")
pelican<-read.csv("pacificBrownPelican.csv")
pelican<-pelican[-which(pelican$NumberByPartyHours == 0),]
setwd(C:\Users\sarah\REU2018\test_Cases)
setwd("\Users\sarah\REU2018\test_Cases")
pelican<-read.csv("pacificBrownPelican.csv")
pelican<-pelican[-which(pelican$NumberByPartyHours == 0),]
setwd("/Users/sarah/REU2018/test_Cases")
pelican<-pelican[-which(pelican$NumberByPartyHours == 0),]
pelican<-read.csv("pacificBrownPelican.csv")
pelican<-pelican[-which(pelican$NumberByPartyHours == 0),]
library("forecast")
plot(fitted(arima(pelican$NumberByPartyHours, order=c(3,0,0))))
plot(pelican$NumberByPartyHours~pelican$Count_y, col="brown", pch=19)
points(c(1:79), fitted(arima(pelican$NumberByPartyHours, order=c(3,0,0))), col="green3")
plot(pelican$NumberByPartyHours~pelican$Count_y, col="brown", pch=19)
points(c(39:117), fitted(arima(pelican$NumberByPartyHours, order=c(3,0,0))), col="green3")
plot(pelican$NumberByPartyHours~pelican$Count_y, col="brown", pch=19, main="Pacific Brown Pelican Population: 1939 to 2017", ylab="Year (since 1900", xlab="Individuals per Party Hour")
points(c(39:117), fitted(arima(pelican$NumberByPartyHours, order=c(3,0,0))), col="green3", pch=19)
setwd("/Users/sarah/REU2018/baar_simulations")
setwd("/Users/sarah/REU2018/baar_simulation_data")
baar_data1_jump0jigg1<-readRDS("baar_data1_jump0jigg1.RData")
baar_data1_jump2jigg7<-readRDS("baar_data1_jump25jigg75.RData")
baar_data1_jump5jigg5<-readRDS("baar_data1_jump50jigg50.RData")
baar_data1_jump7jigg2<-readRDS("baar_data1_jump75jiggle25.RData")
baar_data1_jump1jigg0<-readRDS("baar_data1_jump1jigg0.RData")
baar_data3_jump0jigg1<-readRDS("baar_data3_jump0jigg1.RData")
baar_data3_jump2jigg7<-readRDS("baar_data3_jump25jigg75.RData")
baar_data3_jump5jigg5<-readRDS("baar_data3_jump50jigg50.RData")
baar_data3_jump7jigg2<-readRDS("baar_data3_jump75jiggle25.RData")
baar_data3_jump1jigg0<-readRDS("baar_data3_jump1jigg0.RData")
baar_data9_jump0jigg1<-readRDS("baar_data9_jump0jigg1.RData")
baar_data9_jump2jigg7<-readRDS("baar_data9_jump25jigg75.RData")
baar_data9_jump5jigg5<-readRDS("baar_data9_jump50jigg50.RData")
baar_data9_jump7jigg2<-readRDS("baar_data9_jump75jiggle25.RData")
baar_data9_jump1jigg0<-readRDS("baar_data9_jump1jigg0.RData")
baar_data11_jump0jigg1<-readRDS("baar_data11_jump0jigg1.RData")
baar_data11_jump2jigg7<-readRDS("baar_data11_jump25jigg75.RData")
baar_data11_jump5jigg5<-readRDS("baar_data11_jump50jigg50.RData")
baar_data11_jump7jigg2<-readRDS("baar_data11_jump75jiggle25.RData")
baar_data11_jump1jigg0<-readRDS("baar_data11_jump1jigg0.RData")
length(baar_data11_jump0jigg1$MSE)
length(baar_data11_jump0jigg1$MSE[[1]])
cutoff = 2500
all_breakpoints = function(breakpoints){
final_breakpoints = NULL
if(length(breakpoints) == 0){
return("")
}else{
for(m in 1:length(breakpoints)){
if(is.atomic(breakpoints[[m]]) == TRUE) {
final_breakpoints = c(final_breakpoints, breakpoints[[m]][c(1:cutoff)], recursive=T)
}else if(dim(breakpoints[[m]])[2] >= 2) {
column_list = NULL
for(i in 1:dim(breakpoints[[m]])[2]){
column_list = c(column_list, breakpoints[[m]][c(1:cutoff),i], recursive=T)
}
final_breakpoints = c(final_breakpoints, column_list, recursive=T)
}
}
return(final_breakpoints)
}
}
bkpts_data1_jump1jigg0 = na.omit(all_breakpoints(baar_data1_jump1jigg0$Breakpoints))
bkpts_data1_jump7jigg2 = na.omit(all_breakpoints(baar_data1_jump7jigg2$Breakpoints))
bkpts_data1_jump5jigg5 = na.omit(all_breakpoints(baar_data1_jump5jigg5$Breakpoints))
bkpts_data1_jump2jigg7 = na.omit(all_breakpoints(baar_data1_jump2jigg7$Breakpoints))
bkpts_data1_jump0jigg1 = na.omit(all_breakpoints(baar_data1_jump0jigg1$Breakpoints))
bkpts_data3_jump1jigg0 = na.omit(all_breakpoints(baar_data3_jump1jigg0$Breakpoints))
bkpts_data3_jump7jigg2 = na.omit(all_breakpoints(baar_data3_jump7jigg2$Breakpoints))
bkpts_data3_jump5jigg5 = na.omit(all_breakpoints(baar_data3_jump5jigg5$Breakpoints))
bkpts_data3_jump2jigg7 = na.omit(all_breakpoints(baar_data3_jump2jigg7$Breakpoints))
bkpts_data3_jump0jigg1 = na.omit(all_breakpoints(baar_data3_jump0jigg1$Breakpoints))
bkpts_data9_jump1jigg0 = na.omit(all_breakpoints(baar_data9_jump1jigg0$Breakpoints))
bkpts_data9_jump7jigg2 = na.omit(all_breakpoints(baar_data9_jump7jigg2$Breakpoints))
bkpts_data9_jump5jigg5 = na.omit(all_breakpoints(baar_data9_jump5jigg5$Breakpoints))
bkpts_data9_jump2jigg7 = na.omit(all_breakpoints(baar_data9_jump2jigg7$Breakpoints))
bkpts_data9_jump0jigg1 = na.omit(all_breakpoints(baar_data9_jump0jigg1$Breakpoints))
bkpts_data11_jump1jigg0 = na.omit(all_breakpoints(baar_data11_jump1jigg0$Breakpoints))
bkpts_data11_jump7jigg2 = na.omit(all_breakpoints(baar_data11_jump7jigg2$Breakpoints))
bkpts_data11_jump5jigg5 = na.omit(all_breakpoints(baar_data11_jump5jigg5$Breakpoints))
bkpts_data11_jump2jigg7 = na.omit(all_breakpoints(baar_data11_jump2jigg7$Breakpoints))
bkpts_data11_jump0jigg1 = na.omit(all_breakpoints(baar_data11_jump0jigg1$Breakpoints))
lower = 30
upper = 60
center_data1_jump1jigg0 = bkpts_data1_jump1jigg0[bkpts_data1_jump1jigg0 > lower & bkpts_data1_jump1jigg0 < upper]
center_data1_jump7jigg2 = bkpts_data1_jump7jigg2[bkpts_data1_jump7jigg2 > lower & bkpts_data1_jump7jigg2 < upper]
center_data1_jump5jigg5 = bkpts_data1_jump5jigg5[bkpts_data1_jump5jigg5 > lower & bkpts_data1_jump5jigg5 < upper]
center_data1_jump2jigg7 = bkpts_data1_jump2jigg7[bkpts_data1_jump2jigg7 > lower & bkpts_data1_jump2jigg7 < upper]
center_data1_jump0jigg1 = bkpts_data1_jump0jigg1[bkpts_data1_jump0jigg1 > lower & bkpts_data1_jump0jigg1 < upper]
center_data3_jump1jigg0 = bkpts_data3_jump1jigg0[bkpts_data3_jump1jigg0 > lower & bkpts_data3_jump1jigg0 < upper]
center_data3_jump7jigg2 = bkpts_data3_jump7jigg2[bkpts_data3_jump7jigg2 > lower & bkpts_data3_jump7jigg2 < upper]
center_data3_jump5jigg5 = bkpts_data3_jump5jigg5[bkpts_data3_jump5jigg5 > lower & bkpts_data3_jump5jigg5 < upper]
center_data3_jump2jigg7 = bkpts_data3_jump2jigg7[bkpts_data3_jump2jigg7 > lower & bkpts_data3_jump2jigg7 < upper]
center_data3_jump0jigg1 = bkpts_data3_jump0jigg1[bkpts_data3_jump0jigg1 > lower & bkpts_data3_jump0jigg1 < upper]
center_data9_jump1jigg0 = bkpts_data9_jump1jigg0[bkpts_data9_jump1jigg0 > lower & bkpts_data9_jump1jigg0 < upper]
center_data9_jump7jigg2 = bkpts_data9_jump7jigg2[bkpts_data9_jump7jigg2 > lower & bkpts_data9_jump7jigg2 < upper]
center_data9_jump5jigg5 = bkpts_data9_jump5jigg5[bkpts_data9_jump5jigg5 > lower & bkpts_data9_jump5jigg5 < upper]
center_data9_jump2jigg7 = bkpts_data9_jump2jigg7[bkpts_data9_jump2jigg7 > lower & bkpts_data9_jump2jigg7 < upper]
center_data9_jump0jigg1 = bkpts_data9_jump0jigg1[bkpts_data9_jump0jigg1 > lower & bkpts_data9_jump0jigg1 < upper]
center_data11_jump1jigg0 = bkpts_data11_jump1jigg0[bkpts_data11_jump1jigg0 > lower & bkpts_data11_jump1jigg0 < upper]
center_data11_jump7jigg2 = bkpts_data11_jump7jigg2[bkpts_data11_jump7jigg2 > lower & bkpts_data11_jump7jigg2 < upper]
center_data11_jump5jigg5 = bkpts_data11_jump5jigg5[bkpts_data11_jump5jigg5 > lower & bkpts_data11_jump5jigg5 < upper]
center_data11_jump2jigg7 = bkpts_data11_jump2jigg7[bkpts_data11_jump2jigg7 > lower & bkpts_data11_jump2jigg7 < upper]
center_data11_jump0jigg1 = bkpts_data11_jump0jigg1[bkpts_data11_jump0jigg1 > lower & bkpts_data11_jump0jigg1 < upper]
data1 = rbind(sd(center_data1_jump1jigg0), sd(center_data1_jump7jigg2), sd(center_data1_jump5jigg5),
sd(center_data1_jump2jigg7), sd(center_data1_jump0jigg1))
data3 = rbind(sd(center_data3_jump1jigg0), sd(center_data3_jump7jigg2), sd(center_data3_jump5jigg5),
sd(center_data3_jump2jigg7), sd(center_data3_jump0jigg1))
data9 = rbind(sd(center_data9_jump1jigg0), sd(center_data9_jump7jigg2), sd(center_data9_jump5jigg5),
sd(center_data9_jump2jigg7), sd(center_data9_jump0jigg1))
data11 = rbind(sd(center_data11_jump1jigg0), sd(center_data11_jump7jigg2), sd(center_data11_jump5jigg5),
sd(center_data11_jump2jigg7), sd(center_data11_jump0jigg1))
all = cbind(data1, data3, data9, data11)
rownames(all) = c("J1J0", "J7J2", "J5J5", "J2J7", "J0J1")
colnames(all) = c("Data1", "Data3", "Data9", "Data11")
all
rowMeans(all)
finalMetrics = function(breakpoints, lower, upper){
final_means = NULL
final_SDs = Null
if(length(breakpoints) == 0){
return("")
}else{
for(m in 1:length(breakpoints)){
if(is.atomic(breakpoints[[m]]) == TRUE) {
current_breakpoints = c(breakpoints[[m]][c(1:cutoff)], recursive=T)
current_breakpoints = current_breakpoints[current_breakpoints > lower & current_breakpoints < upper]
final_means = c(final_means, mean(current_breakpoints), recursive=T)
final_SDs = c(final_SDs, sd(current_breakpoints), recursive=T)
}else if(dim(breakpoints[[m]])[2] >= 2) {
column_list = NULL
for(i in 1:dim(breakpoints[[m]])[2]){
column_list = c(column_list, breakpoints[[m]][c(1:cutoff),i], recursive=T)
}
column_list = column_list[column_list > lower & column_list < upper]
final_means = c(final_means, mean(column_list), recursive=T)
final_SDs = c(final_SDs, sd(column_list), recursive=T)
}
}
return(list(final_means, final_SDs)
}
}
finalMetrics = function(breakpoints, lower, upper){
final_means = NULL
final_SDs = Null
if(length(breakpoints) == 0){
return("")
}else{
for(m in 1:length(breakpoints)){
if(is.atomic(breakpoints[[m]]) == TRUE) {
current_breakpoints = c(breakpoints[[m]][c(1:cutoff)], recursive=T)
current_breakpoints = current_breakpoints[current_breakpoints > lower & current_breakpoints < upper]
final_means = c(final_means, mean(current_breakpoints), recursive=T)
final_SDs = c(final_SDs, sd(current_breakpoints), recursive=T)
}else if(dim(breakpoints[[m]])[2] >= 2) {
column_list = NULL
for(i in 1:dim(breakpoints[[m]])[2]){
column_list = c(column_list, breakpoints[[m]][c(1:cutoff),i], recursive=T)
}
column_list = column_list[column_list > lower & column_list < upper]
final_means = c(final_means, mean(column_list), recursive=T)
final_SDs = c(final_SDs, sd(column_list), recursive=T)
}
}
return(list(final_means, final_SDs)
}
}
finalMetrics = function(breakpoints, lower, upper){
final_means = NULL
final_SDs = Null
if(length(breakpoints) == 0){
return("")
}else{
for(m in 1:length(breakpoints)){
if(is.atomic(breakpoints[[m]]) == TRUE) {
current_breakpoints = c(breakpoints[[m]][c(1:cutoff)], recursive=T)
current_breakpoints = current_breakpoints[current_breakpoints > lower & current_breakpoints < upper]
final_means = c(final_means, mean(current_breakpoints), recursive=T)
final_SDs = c(final_SDs, sd(current_breakpoints), recursive=T)
}else if(dim(breakpoints[[m]])[2] >= 2) {
column_list = NULL
for(i in 1:dim(breakpoints[[m]])[2]){
column_list = c(column_list, breakpoints[[m]][c(1:cutoff),i], recursive=T)
}
column_list = column_list[column_list > lower & column_list < upper]
final_means = c(final_means, mean(column_list), recursive=T)
final_SDs = c(final_SDs, sd(column_list), recursive=T)
}
}
return(list(final_means, final_SDs))
}
}
finalMetrics = function(breakpoints, lower, upper){
final_means = NULL
final_SDs = Null
if(length(breakpoints) == 0){
return("")
}else{
for(m in 1:length(breakpoints)){
if(is.atomic(breakpoints[[m]]) == TRUE) {
current_breakpoints = na.omit(c(breakpoints[[m]][c(1:cutoff)], recursive=T))
current_breakpoints = current_breakpoints[current_breakpoints > lower & current_breakpoints < upper]
final_means = c(final_means, mean(current_breakpoints), recursive=T)
final_SDs = c(final_SDs, sd(current_breakpoints), recursive=T)
}else if(dim(breakpoints[[m]])[2] >= 2) {
column_list = NULL
for(i in 1:dim(breakpoints[[m]])[2]){
column_list = na.omit(c(column_list, breakpoints[[m]][c(1:cutoff),i], recursive=T))
}
column_list = column_list[column_list > lower & column_list < upper]
final_means = c(final_means, mean(column_list), recursive=T)
final_SDs = c(final_SDs, sd(column_list), recursive=T)
}
}
return(list(final_means, final_SDs))
}
}
lower = 30
upper = 60
finalMetrics = function(breakpoints){
final_means = NULL
final_SDs = Null
if(length(breakpoints) == 0){
return("")
}else{
for(m in 1:length(breakpoints)){
if(is.atomic(breakpoints[[m]]) == TRUE) {
current_breakpoints = na.omit(c(breakpoints[[m]][c(1:cutoff)], recursive=T))
current_breakpoints = current_breakpoints[current_breakpoints > lower & current_breakpoints < upper]
final_means = c(final_means, mean(current_breakpoints), recursive=T)
final_SDs = c(final_SDs, sd(current_breakpoints), recursive=T)
}else if(dim(breakpoints[[m]])[2] >= 2) {
column_list = NULL
for(i in 1:dim(breakpoints[[m]])[2]){
column_list = na.omit(c(column_list, breakpoints[[m]][c(1:cutoff),i], recursive=T))
}
column_list = column_list[column_list > lower & column_list < upper]
final_means = c(final_means, mean(column_list), recursive=T)
final_SDs = c(final_SDs, sd(column_list), recursive=T)
}
}
return(list(final_means, final_SDs))
}
}
finalMetrics(baar_data1_jump1jigg0$Breakpoints)
lower = 30
upper = 60
finalMetrics = function(breakpoints){
final_means = NULL
final_SDs = NULL
if(length(breakpoints) == 0){
return("")
}else{
for(m in 1:length(breakpoints)){
if(is.atomic(breakpoints[[m]]) == TRUE) {
current_breakpoints = na.omit(c(breakpoints[[m]][c(1:cutoff)], recursive=T))
current_breakpoints = current_breakpoints[current_breakpoints > lower & current_breakpoints < upper]
final_means = c(final_means, mean(current_breakpoints), recursive=T)
final_SDs = c(final_SDs, sd(current_breakpoints), recursive=T)
}else if(dim(breakpoints[[m]])[2] >= 2) {
column_list = NULL
for(i in 1:dim(breakpoints[[m]])[2]){
column_list = na.omit(c(column_list, breakpoints[[m]][c(1:cutoff),i], recursive=T))
}
column_list = column_list[column_list > lower & column_list < upper]
final_means = c(final_means, mean(column_list), recursive=T)
final_SDs = c(final_SDs, sd(column_list), recursive=T)
}
}
return(list(final_means, final_SDs))
}
}
finalMetrics(baar_data1_jump1jigg0$Breakpoints)
lower = 30
upper = 60
finalSDs = function(breakpoints){
final_SDs = NULL
if(length(breakpoints) == 0){
return("")
}else{
for(m in 1:length(breakpoints)){
if(is.atomic(breakpoints[[m]]) == TRUE) {
current_breakpoints = na.omit(c(breakpoints[[m]][c(1:cutoff)], recursive=T))
current_breakpoints = current_breakpoints[current_breakpoints > lower & current_breakpoints < upper]
final_SDs = c(final_SDs, sd(current_breakpoints), recursive=T)
}else if(dim(breakpoints[[m]])[2] >= 2) {
column_list = NULL
for(i in 1:dim(breakpoints[[m]])[2]){
column_list = na.omit(c(column_list, breakpoints[[m]][c(1:cutoff),i], recursive=T))
}
column_list = column_list[column_list > lower & column_list < upper]
final_SDs = c(final_SDs, sd(column_list), recursive=T)
}
}
return(final_SDs)
}
}
finalMetrics(baar_data1_jump1jigg0$Breakpoints)
lower = 30
upper = 60
finalSDs = function(breakpoints){
final_SDs = NULL
if(length(breakpoints) == 0){
return("")
}else{
for(m in 1:length(breakpoints)){
if(is.atomic(breakpoints[[m]]) == TRUE) {
current_breakpoints = na.omit(c(breakpoints[[m]][c(1:cutoff)], recursive=T))
current_breakpoints = current_breakpoints[current_breakpoints > lower & current_breakpoints < upper]
final_SDs = c(final_SDs, sd(current_breakpoints), recursive=T)
}else if(dim(breakpoints[[m]])[2] >= 2) {
column_list = NULL
for(i in 1:dim(breakpoints[[m]])[2]){
column_list = na.omit(c(column_list, breakpoints[[m]][c(1:cutoff),i], recursive=T))
}
column_list = column_list[column_list > lower & column_list < upper]
final_SDs = c(final_SDs, sd(column_list), recursive=T)
}
}
return(final_SDs)
}
}
finalSDs(baar_data1_jump1jigg0$Breakpoints)
SD_data1_jump1jigg0 = finalSDs(baar_data1_jump1jigg0$Breakpoints)
SD_data1_jump7jigg2 = finalSDs(baar_data1_jump7jigg2$Breakpoints)
SD_data1_jump5jigg5 = finalSDs(baar_data1_jump5jigg5$Breakpoints)
SD_data1_jump2jigg7 = finalSDs(baar_data1_jump2jigg7$Breakpoints)
SD_data1_jump0jigg1 = finalSDs(baar_data1_jump0jigg1$Breakpoints)
SD_data1_jump1jigg0 = finalSDs(baar_data1_jump1jigg0$Breakpoints)
SD_data1_jump7jigg2 = finalSDs(baar_data1_jump7jigg2$Breakpoints)
SD_data1_jump5jigg5 = finalSDs(baar_data1_jump5jigg5$Breakpoints)
SD_data1_jump2jigg7 = finalSDs(baar_data1_jump2jigg7$Breakpoints)
SD_data1_jump0jigg1 = finalSDs(baar_data1_jump0jigg1$Breakpoints)
SD_data3_jump1jigg0 = finalSDs(baar_data3_jump1jigg0$Breakpoints)
SD_data3_jump7jigg2 = finalSDs(baar_data3_jump7jigg2$Breakpoints)
SD_data3_jump5jigg5 = finalSDs(baar_data3_jump5jigg5$Breakpoints)
SD_data3_jump2jigg7 = finalSDs(baar_data3_jump2jigg7$Breakpoints)
SD_data3_jump0jigg1 = finalSDs(baar_data3_jump0jigg1$Breakpoints)
SD_data9_jump1jigg0 = finalSDs(baar_data9_jump1jigg0$Breakpoints)
SD_data9_jump7jigg2 = finalSDs(baar_data9_jump7jigg2$Breakpoints)
SD_data9_jump5jigg5 = finalSDs(baar_data9_jump5jigg5$Breakpoints)
SD_data9_jump2jigg7 = finalSDs(baar_data9_jump2jigg7$Breakpoints)
SD_data9_jump0jigg1 = finalSDs(baar_data9_jump0jigg1$Breakpoints)
SD_data11_jump1jigg0 = finalSDs(baar_data11_jump1jigg0$Breakpoints)
SD_data11_jump7jigg2 = finalSDs(baar_data11_jump7jigg2$Breakpoints)
SD_data11_jump5jigg5 = finalSDs(baar_data11_jump5jigg5$Breakpoints)
SD_data11_jump2jigg7 = finalSDs(baar_data11_jump2jigg7$Breakpoints)
SD_data11_jump0jigg1 = finalSDs(baar_data11_jump0jigg1$Breakpoints)
data1 = cbind(SD_data1_jump1jigg0, sd(SD_data1_jump1jigg0),
SD_data1_jump7jigg2, sd(SD_data1_jump7jigg2),
SD_data1_jump5jigg5, sd(SD_data1_jump5jigg5),
SD_data1_jump2jigg7, sd(SD_data1_jump2jigg7),
SD_data1_jump0jigg1, sd(SD_data1_jump0jigg1))
data1
data1 = cbind(mean(SD_data1_jump1jigg0), sd(SD_data1_jump1jigg0),
mean(SD_data1_jump7jigg2), sd(SD_data1_jump7jigg2),
mean(SD_data1_jump5jigg5), sd(SD_data1_jump5jigg5),
mean(SD_data1_jump2jigg7), sd(SD_data1_jump2jigg7),
mean(SD_data1_jump0jigg1), sd(SD_data1_jump0jigg1))
data1
data3 = cbind(mean(SD_data3_jump1jigg0), sd(SD_data3_jump1jigg0),
mean(SD_data3_jump7jigg2), sd(SD_data3_jump7jigg2),
mean(SD_data3_jump5jigg5), sd(SD_data3_jump5jigg5),
mean(SD_data3_jump2jigg7), sd(SD_data3_jump2jigg7),
mean(SD_data3_jump0jigg1), sd(SD_data3_jump0jigg1))
data3
q()
