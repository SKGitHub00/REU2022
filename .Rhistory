geom_point() +
geom_smooth(method="lm", se=F)
G <- ggplot(midwest, aes(x=area, y=poptotal)) +
geom_point() +
geom_smooth(method="lm")
G+xlim(c(0,0.1))+ylim(c(0,100000))
g1 <- ggplot(midwest, aes(x=area, y=poptotal)) +
geom_point() +
geom_smooth(method="lm")
g1+coord_cartesian(xlim=c(0,0.1),ylim=c(0,100000))
g2<- g1+coord_cartesian(xlim=c(0,0.1),ylim=c(0,100000))
g2+labs(title="Area vs Pop", subtitle = "From Midwest data", y="Population", x="area", caption="Midwest demographics")
ggplot(midwest, aes(x=area, y=poptotal)) +
geom_point() +
geom_smooth(method="lm") +
coord_cartesian(xlim=c(0,0.1), ylim=c(0, 1000000)) +
labs(title="Area Vs Population", subtitle="From midwest dataset", y="Population", x="Area", caption="Midwest Demographics")
ggplot(midwest, aes(x=area, y=poptotal)) +
geom_point(col="steelblue", size=3) +
geom_smooth(method="lm", col="firebrick") +
coord_cartesian(xlim=c(0,0.1), ylim=c(0, 1000000)) +
labs(title="Area Vs Population", subtitle="From midwest dataset", y="Population", x="Area", caption="Midwest Demographics")
ggplot(midwest, aes(x=area, y=poptotal)) +
geom_point(col="steelblue", size=2) +
geom_smooth(method="lm", col="firebrick") +
coord_cartesian(xlim=c(0,0.1), ylim=c(0, 1000000)) +
labs(title="Area Vs Population", subtitle="From midwest dataset", y="Population", x="Area", caption="Midwest Demographics")
ggplot(midwest, aes(x=area, y=poptotal)) +
geom_point(aes(col=state), size=2) +
geom_smooth(method="lm", col="firebrick") +
coord_cartesian(xlim=c(0,0.1), ylim=c(0, 1000000)) +
labs(title="Area Vs Population", subtitle="From midwest dataset", y="Population", x="Area", caption="Midwest Demographics")
ggplot(midwest, aes(x=area, y=poptotal)) +
geom_point(aes(col=state), size=2) +
geom_smooth(method="lm", col="firebrick") +
coord_cartesian(xlim=c(0,0.1), ylim=c(0, 1000000)) +
labs(title="Area Vs Population", subtitle="From midwest dataset", y="Population", x="Area", caption="Midwest Demographics") +
theme(legend.position="None") +
scale_colour_brewer(palette = "Set1")  # change color palette
gg <- ggplot(midwest, aes(x=area, y=poptotal)) +
geom_point(aes(col=state), size=3) +  # Set color to vary based on state categories.
geom_smooth(method="lm", col="firebrick", size=2) +
coord_cartesian(xlim=c(0, 0.1), ylim=c(0, 1000000)) +
labs(title="Area Vs Population", subtitle="From midwest dataset", y="Population", x="Area", caption="Midwest Demographics")
# Change breaks
gg + scale_x_continuous(breaks=seq(0, 0.1, 0.01))
#Reverse the x-scale
gg <- ggplot(midwest, aes(x=area, y=poptotal)) +
geom_point(aes(col=state), size=3) +  # Set color to vary based on state categories.
geom_smooth(method="lm", col="firebrick", size=2) +
coord_cartesian(xlim=c(0, 0.1), ylim=c(0, 1000000)) +
labs(title="Area Vs Population", subtitle="From midwest dataset", y="Population", x="Area", caption="Midwest Demographics")
#Reverse the x-scale
gg <- ggplot(midwest, aes(x=area, y=poptotal)) +
geom_point(aes(col=state), size=3) +  # Set color to vary based on state categories.
geom_smooth(method="lm", col="firebrick", size=2) +
coord_cartesian(xlim=c(0, 0.1), ylim=c(0, 1000000)) +
labs(title="Area Vs Population", subtitle="From midwest dataset", y="Population", x="Area", caption="Midwest Demographics")
gg + scale_x_reverse()
gg <- ggplot(midwest, aes(x=area, y=poptotal)) +
geom_point(aes(col=state), size=3) +  # Set color to vary based on state categories.
geom_smooth(method="lm", col="firebrick", size=2) +
coord_cartesian(xlim=c(0, 0.1), ylim=c(0, 1000000)) +
labs(title="Area Vs Population", subtitle="From midwest dataset", y="Population", x="Area", caption="Midwest Demographics")
gg <- gg + scale_x_continuous(breaks=seq(0, 0.1, 0.01))
gg + theme_classic() + labs(subtitle="Classic Theme") # set classic theme
ggplot(midwest, aes(x=area, y=poptotal)) +
geom_point(aes(col=state), size=2) +
geom_smooth(method="lm", col="firebrick") +
coord_cartesian(xlim=c(0,0.1), ylim=c(0, 1000000)) +
labs(title="Area Vs Population", subtitle="From midwest dataset", y="Population", x="Area", caption="Midwest Demographics") +
theme(legend.position="None") +
scale_colour_brewer(palette = "Set1") +
theme_classic() + labs(subtitle="Classic Theme")
#changing color palet
ggplot(midwest, aes(x=area, y=poptotal)) +
geom_point(aes(col=state), size=2) +
geom_smooth(method="lm", col="firebrick") +
coord_cartesian(xlim=c(0,0.1), ylim=c(0, 1000000)) +
labs(title="Area Vs Population", subtitle="From midwest dataset", y="Population", x="Area", caption="Midwest Demographics") +
theme(legend.position="None") +
scale_colour_brewer(palette = "Set1")  # change color palette
#classic theme
ggplot(midwest, aes(x=area, y=poptotal)) +
geom_point(aes(col=state), size=2) +
geom_smooth(method="lm", col="firebrick") +
coord_cartesian(xlim=c(0,0.1), ylim=c(0, 1000000)) +
labs(title="Area Vs Population", subtitle="From midwest dataset", y="Population", x="Area", caption="Midwest Demographics") +
theme(legend.position="None") +
scale_colour_brewer(palette = "Set1") +
theme_classic() + labs(subtitle="Classic Theme")
ggplot(midwest, aes(x=area, y=poptotal)) +
geom_point(aes(col=state), size=2) +
geom_smooth(method="lm", col="firebrick") +
coord_cartesian(xlim=c(0,0.1), ylim=c(0, 1000000)) +
labs(title="Area Vs Population", subtitle="From midwest dataset", y="Population", x="Area", caption="Midwest Demographics") +
theme(legend.position="None") +
scale_colour_brewer(palette = "Set1") +
theme_classic() + labs(subtitle="Classic Theme") +
theme(plot.background = element_rect(fill = "pink"))
ggplot(midwest, aes(x=area, y=poptotal)) +
geom_point(aes(col=state), size=2) +
geom_smooth(method="lm", col="firebrick") +
coord_cartesian(xlim=c(0,0.1), ylim=c(0, 1000000)) +
labs(title="Area Vs Population", subtitle="From midwest dataset", y="Population", x="Area", caption="Midwest Demographics") +
theme(legend.position="None") +
scale_colour_brewer(palette = "Set1") +
theme_classic() + labs(subtitle="Classic Theme") +
theme(plot.background = element_rect(fill = "pink")) +
theme(axis.text = element_text(colour = "red"))
ggplot(midwest, aes(x=area, y=poptotal)) +
geom_point(aes(col=state), size=2) +
geom_smooth(method="lm", col="firebrick") +
coord_cartesian(xlim=c(0,0.1), ylim=c(0, 1000000)) +
labs(title="Area Vs Population", subtitle="From midwest dataset", y="Population", x="Area", caption="Midwest Demographics") +
theme(legend.position="None") +
scale_colour_brewer(palette = "Set1") +
theme_classic() + labs(subtitle="Classic Theme") +
theme(plot.background = element_rect(fill = "pink")) +
theme(axis.text = element_text(colour = "blue"))
source("http://foxweb.marist.edu/users/duy.nguyen2/cdc.R")
head(cdc)
ggplot(cdc, aes(x=weight,y=age))+geom_point()
ggplot(cdc, aes(x=weight,y=age)) +
geom_point(aes(col=genhlth))
ggplot(cdc, aes(x=weight,y=age)) +
geom_point(aes(col=genhlth)) +
lab(title="Age as a function of Weight", subtitle="Data from cdc", y="Age",x="Weight", caption="Colored by General Health")
#c ) use the qplot to plot the age as a function of weight
#    add colors using general health conditions
#    use facets to sepera
ggplot(cdc, aes(x=weight,y=age)) +
geom_point(aes(col=genhlth)) +
labs(title="Age as a function of Weight", subtitle="Data from cdc", y="Age",x="Weight", caption="Colored by General Health")
#c ) use the qplot to plot the age as a function of weight
#    add colors using general health conditions
#    us
ggplot(cdc, aes(x=weight,y=age)) +
geom_point(aes(col=genhlth)) +
labs(title="Age as a function of Weight", subtitle="Data from cdc", y="Age",x="Weight", caption="Colored by General Health") +
theme_classic() + labs(subtitle="Classic Theme")
ggplot(cdc, aes(x=weight,y=age)) +
geom_point(aes(col=genhlth)) +
labs(title="Age as a function of Weight", subtitle="Data from cdc", y="Age",x="Weight", caption="Colored by General Health") +
theme_classic()
ggplot(cdc, aes(x=weight,y=age)) +
geom_point(aes(col=genhlth)) +
labs(title="Age as a function of Weight", subtitle="Data from cdc", y="Age",x="Weight", caption="Colored by General Health") +
theme_classic() +
theme(plot.background = element_rect(fill = "gray"))
ggplot(cdc, aes(x=weight,y=age)) +
geom_point(aes(col=genhlth)) +
labs(title="Age as a function of Weight", subtitle="Data from cdc", y="Age",x="Weight", caption="Colored by General Health") +
scale_colour_brewer(palette = "Set1") +
theme_classic() +
theme(plot.background = element_rect(fill = "gray"))
ggplot(cdc, aes(x=weight,y=age)) +
geom_point(aes(col=genhlth)) +
labs(title="Age as a function of Weight", subtitle="Data from cdc", y="Age",x="Weight", caption="Colored by General Health") +
scale_colour_brewer(palette = "Set1") +
theme_classic() +
theme(plot.background = element_rect(fill = "gray")) +
theme(axis.text = element_text(colour = "purple"))
ggplot(cdc, aes(x=weight,y=age)) +
geom_point(aes(col=genhlth)) +
labs(title="Age as a function of Weight", subtitle="Data from cdc", y="Age",x="Weight", caption="Colored by General Health") +
scale_colour_brewer(palette = "Set1") +
theme_classic() +
theme(plot.background = element_rect(fill = "gray")) +
theme(axis.text = element_text(colour = "darkpurple"))
ggplot(cdc, aes(x=weight,y=age)) +
geom_point(aes(col=genhlth)) +
labs(title="Age as a function of Weight", subtitle="Data from cdc", y="Age",x="Weight", caption="Colored by General Health") +
scale_colour_brewer(palette = "Set1") +
theme_classic() +
theme(plot.background = element_rect(fill = "gray")) +
theme(axis.text = element_text(colour = "darkblue"))
ggplot(cdc, aes(x=weight,y=age)) +
geom_point(aes(col=genhlth)) +
labs(title="Age as a function of Weight", subtitle="Data from cdc", y="Age",x="Weight", caption="Colored by General Health") +
scale_colour_brewer(palette = "Set1") +
theme_classic() +
theme(plot.background = element_rect(fill = "gray")) +
theme(axis.text = element_text(colour = "darkblue")) +
theme(axis.text.title = element_text(colour = "darkblue"))
ggplot(cdc, aes(x=weight,y=age)) +
geom_point(aes(col=genhlth)) +
labs(title="Age as a function of Weight", subtitle="Data from cdc", y="Age",x="Weight", caption="Colored by General Health") +
scale_colour_brewer(palette = "Set1") +
theme_classic() +
theme(plot.background = element_rect(fill = "gray")) +
theme(axis.text = element_text(colour = "darkblue")) +
theme(axis.text.x = element_text(colour = "blue"))
ggplot(cdc, aes(x=weight,y=age)) +
geom_point(aes(col=genhlth)) +
labs(title="Age as a function of Weight", subtitle="Data from cdc", y="Age",x="Weight", caption="Colored by General Health") +
scale_colour_brewer(palette = "Set1") +
theme_classic() +
theme(plot.background = element_rect(fill = "gray")) +
theme(axis.text = element_text(colour = "darkblue")) +
themetext.title = element_text(colour = "blue"))
ggplot(cdc, aes(x=weight,y=age)) +
geom_point(aes(col=genhlth)) +
labs(title="Age as a function of Weight", subtitle="Data from cdc", y="Age",x="Weight", caption="Colored by General Health") +
scale_colour_brewer(palette = "Set1") +
theme_classic() +
theme(plot.background = element_rect(fill = "gray")) +
theme(axis.text = element_text(colour = "darkblue"))
ggplot(cdc, aes(x=weight,y=age)) +
geom_point(aes(col=genhlth)) +
labs(title="Age as a function of Weight", subtitle="Data from cdc", y="Age",x="Weight", caption="Colored by General Health") +
scale_colour_brewer(palette = "Set1") +
theme_classic() +
theme(plot.background = element_rect(fill = "gray")) +
theme(axis.text = element_text(colour = "darkblue")) +
theme(plot.title = element_text(colour = "darkblue"))
ggplot(cdc, aes(x=weight,y=age)) +
geom_point(aes(col=gender)) +
labs(title="Age as a function of Weight", subtitle="Data from cdc", y="Age",x="Weight", caption="Colored by General Health") +
scale_colour_brewer(palette = "Set1") +
theme_classic() +
theme(plot.background = element_rect(fill = "gray")) +
theme(axis.text = element_text(colour = "darkblue")) +
theme(plot.title = element_text(colour = "darkblue"))
ggplot(cdc, aes(x=weight,y=age)) +
geom_point(aes(col=gender)) +
labs(title="Age as a function of Weight", subtitle="Data from cdc", y="Age",x="Weight", caption="Colored by Gender") +
scale_colour_brewer(palette = "Set1") +
theme_classic() +
theme(plot.background = element_rect(fill = "gray")) +
theme(axis.text = element_text(colour = "darkblue")) +
theme(plot.title = element_text(colour = "darkblue"))
cdc$gender2 = if(cdc$gender == "f") { cdc$gender ="Female" }
cdc$gender1 = ifelse(cdc$gender == "m","Male","Female")
ggplot(cdc, aes(x=weight,y=age)) +
geom_point(aes(col=gender1)) +
labs(title="Age as a function of Weight", subtitle="Data from cdc", y="Age",x="Weight", caption="Colored by Gender") +
scale_colour_brewer(palette = "Set1") +
theme_classic() +
theme(plot.background = element_rect(fill = "gray")) +
theme(axis.text = element_text(colour = "darkblue")) +
theme(plot.title = element_text(colour = "darkblue"))
ggplot(cdc, aes(x=weight,y=age)) +
geom_point(aes(col=gender1)) +
labs(title="Age as a function of Weight", subtitle="Data from cdc", y="Age",x="Weight", caption="Colored by Gender") +
scale_colour_brewer(palette = "Set1") +
theme_classic() +
theme(plot.background = element_rect(fill = "gray")) +
theme(axis.text = element_text(colour = "darkblue")) +
theme(plot.title = element_text(colour = "darkblue")) +
theme(plot.subtitle = element_text(colour = "darkred"))
qplot(weight, age, data=cdc)  #since age is a function it has to be on the y axis
ggplot(cdc, aes(x=weight,y=age)) +
geom_point(aes(col=gender1)) +
labs(title="Age as a function of Weight", subtitle="Data from cdc", y="Age",x="Weight", caption="Colored by Gender") +
scale_colour_brewer(palette = "Set1") +
theme_classic() +
theme(plot.background = element_rect(fill = "gray")) +
theme(axis.text = element_text(colour = "darkblue")) +
theme(plot.title = element_text(colour = "darkblue")) +
theme(plot.subtitle = element_text(colour = "darkred"))
graphics.off()
rm(list=ls())
cat("\014")
gg <- ggplot(midwest, aes(x=area, y=poptotal)) +
geom_point(aes(col=state, size=popdensity)) +
geom_smooth(method="lm", se=T) +
xlim(c(0, 0.1)) +
ylim(c(0, 500000)) +
labs(subtitle="Area Vs Population",
y="Population",
x="Area",
title="Scatterplot",
caption = "Source: midwest")
gg+theme_classic()
g <- ggplot(midwest, aes(x=area, y=poptotal)) +
geom_boxplot(aes(fil=state)) +
labs(title="Boxplot",
caption = "Source: midwest",
subtitle = "Area Vs Population")
g+theme_classic()
g <- ggplot(midwest, aes(x=area, y=poptotal)) +
geom_boxplot(aes(fil=state)) +
labs(title="Boxplot",
caption = "Source: midwest",
subtitle = "Area Vs Population") +
ylim(c(0,100000))
g+theme_classic()
g <- ggplot(midwest, aes(x=area, y=poptotal)) +
geom_boxplot(aes(fill=state)) +
labs(title="Boxplot",
caption = "Source: midwest",
subtitle = "Area Vs Population") +
ylim(c(0,100000))
g+theme_classic()
g <- ggplot(midwest, aes(x=area, y=poptotal))
g +  geom_boxplot(aes(fill=state)) +
labs(title="Boxplot",
caption = "Source: midwest",
subtitle = "Area Vs Population") +
ylim(c(0,100000)) +
theme_classic()
g <- ggplot(midwest, aes(x=state, y=poptotal))
g +  geom_boxplot(aes(fill=state)) +
labs(title="Boxplot",
caption = "Source: midwest",
subtitle = "Area Vs Population") +
ylim(c(0,100000)) +
theme_classic()
g + geom_boxplot(aes(fill = state)) +
labs(title="Boxplot",
caption = "Source: midwest",
subtitle = "Area Vs Population" ) +
ylim(c(0,100000)) +
theme(legend.position="None") +
theme_classic()
g + geom_boxplot(aes(fill = state)) +
labs(title="Boxplot",
caption = "Source: midwest",
subtitle = "Area Vs Population" ) +
ylim(c(0,100000)) +
theme(legend.position="None")
g + geom_boxplot(aes(fill = state)) +
labs(title="Boxplot",
caption = "Source: midwest",
subtitle = "Area Vs Population" ) +
ylim(c(0,100000)) +
theme_classic(legend.position="None")
g + geom_boxplot(aes(fill = state)) +
labs(title="Boxplot",
caption = "Source: midwest",
subtitle = "Area Vs Population" ) +
ylim(c(0,100000)) +
theme_classic(legend.position="None")
g + geom_boxplot(aes(fill = state)) +
labs(title="Boxplot",
caption = "Source: midwest",
subtitle = "Area Vs Population" ) +
ylim(c(0,100000)) +
theme(legend.position="None")
g + geom_boxplot(aes(fill = state)) +
labs(title="Boxplot",
caption = "Source: midwest",
subtitle = "Area Vs Population" ) +
ylim(c(0,100000)) +
theme(legend.position="None") +
theme_classic()
g + geom_boxplot(aes(fill = state)) +
labs(title="Boxplot",
caption = "Source: midwest",
subtitle = "Area Vs Population" ) +
ylim(c(0,100000)) +
theme(legend.position="None")
g + geom_boxplot(aes(fill = state)) +
labs(title="Boxplot",
caption = "Source: midwest",
subtitle = "Area Vs Population" ) +
theme_classic() +
ylim(c(0,100000)) +
theme(legend.position="None")
?mpg
attach(mpg)
manufacturer[1:10]
manufacturer[1:20]
ggg <- ggplot(mpg, aes(manufacturer))
ggg + geom_bar(aes(fill=class), width = 0.5)
ggg <- ggplot(mpg, aes(manufacturer))
ggg + geom_bar(aes(fill=class), width = 0.5) +
labs(title = "Histogram on Categorical Variable")
source("http://foxweb.marist.edu/users/duy.nguyen2/cdc.R")
head(cdc)
ggplot(cdc, aes(genhlth)) +
geom_boxplot()
ggplot(cdc, aes(age)) +
geom_boxplot(aes(genhlth))
ggplot(cdc, aes( x=genhlth,y=age)) +
geom_boxplot(aes(genhlth))
ggplot(cdc, aes( x=genhlth,y=age)) +
geom_boxplot(aes(fill=genhlth)))
ggplot(cdc, aes( x=genhlth,y=age)) +
geom_boxplot(aes(fill=genhlth))
ggplot(cdc, aes( x=age, y=gender)) +
geom_boxplot(aes(fill=gender))
ggplot(cdc, aes( x=gender, y=age)) +
geom_boxplot(aes(fill=gender))
ggplot(cdc, aes(x=smoke100, y=age)) +
geom_boxplot(aes(fill=smoke100))
ggplot(cdc, aes(x=smoke100, y=age)) +
geom_boxplot()
cdc$smoke = ifelse(cdc$smoke100 == "1", "Smoker", "Non-Smoker")
ggplot(cdc, aes(x=smoke, y=age)) +
geom_boxplot()
ggplot(cdc, aes(x=smoke, y=age)) +
geom_boxplot(aes(fill=smoke))
cdc$smoke = ifelse(cdc$smoke100 == "1", "Smoker", "Non-Smoker")
ggplot(cdc, aes(x=smoke, y=age)) +
geom_boxplot(aes(fill=smoke)) +
theme(legend.position="None")
ggplot(cdc, aes(x=smoke, y=age)) +
geom_boxplot(aes(fill=smoke)) +
labs(title="Smoker and Age") +
theme(legend.position="None")
ggplot(cdc, aes( x=genhlth,y=age)) +
geom_boxplot(aes(fill=genhlth)) +
labs(title="genhlth and Age")
theme(legend.position="None")
ggplot(cdc, aes( x=genhlth,y=age)) +
geom_boxplot(aes(fill=genhlth)) +
labs(title="genhlth and Age") +
theme(legend.position="None")
first = rnorm(30, mean = 5, sd = 1) #30 random data points from a normal distribution with means 5
second = rnorm(30, mean = 15, sd = 1) #30 random data points from a normal distribution with means 15
third = rnorm(30, mean = 30, sd = 1)
dif_means = c(first, second) #adding the two sets of data points together
dif_means_2 = c(first, second, third)
time = c(1:60) #making time
test_data = data.frame(time, dif_means) #our data with x = time and y = two sets of data with two means
plot(test_data, main="Initial Data with Means Equal to 5 and 15")
neuron = read.table("exampledata.txt")
setwd("~/REU2018")
neuron = read.table("exampledata.txt")
library(splines)
library("strucchange")
dif_means_neuron<-ts(neuron[,2], start=1, end=110) #create time series data on only the first data
breakpoints(dif_means_neuron ~ 1, breaks = 5) #no break points
plot(dif_means_neuron)
points(43,neuron[43,2], col="purple", pch= 18)
points(60,neuron[60,2], col="purple", pch= 18)
points(90,neuron[90,2], col="purple", pch= 18)
plot(neuron, xlab="Seconds", ylab="Number of Firing Events", main="Neuron Data, df = 3")
points(43,neuron[43,2], col="purple", pch= 18)
points(60,neuron[60,2], col="purple", pch= 18)
points(90,neuron[90,2], col="purple", pch= 18)
plot(dif_means_neuron)
points(43,neuron[43,2], col="purple", pch= 18)
points(60,neuron[60,2], col="purple", pch= 18)
points(90,neuron[90,2], col="purple", pch= 18)
breakpoints(dif_means_neuron ~ 1, breaks = 5, h=0) #no break points
breakpoints(dif_means_neuron ~ 1, breaks = 5, h=.05) #no break points
plot(dif_means_neuron)
plot(dif_means_neuron)
points(43,neuron[43,2], col="purple", pch= 18)
points(48,neuron[48,2], col="purple", pch= 18)
points(56,neuron[56,2], col="purple", pch= 18)
points(72,neuron[72,2], col="purple", pch= 18)
points(98,neuron[98,2], col="purple", pch= 18)
dif_means_ts_0<-ts(first, start=1, end=30, h=0.5) #create time series data on only the first data
dif_means_ts_0<-ts(first, start=1, end=30, h=0.05) #create time series data on only the first data
first = rnorm(30, mean = 5, sd = 1) #30 random data points from a normal distribution with means 5
second = rnorm(30, mean = 15, sd = 1) #30 random data points from a normal distribution with means 15
third = rnorm(30, mean = 30, sd = 1)
dif_means = c(first, second) #adding the two sets of data points together
dif_means_2 = c(first, second, third)
time = c(1:60) #making time
test_data = data.frame(time, dif_means) #our data with x = time and y = two sets of data with two means
plot(test_data, main="Initial Data with Means Equal to 5 and 15")
library("strucchange")
?breakpoints
dif_means_ts_0<-ts(first, start=1, end=30, h=0.05) #create time series data on only the first data
dif_means_ts_0<-ts(first, start=1,end=30) #create time series data on only the first data
breakpoints(dif_means_ts_0 ~ 1, breaks = 2 , h=0.05) #no break points
breakpoints(dif_means_ts_0 ~ 1, breaks = 2 , h=0.005) #no break points
breakpoints(dif_means_ts_0 ~ 1, breaks = 2 , h=0.001) #no break points
breakpoints(dif_means_ts_0 ~ 1, breaks = 2 , h=0.1) #no break points
dif_means_ts_1<-ts(dif_means, start=1, end=60) #create time series data with first and second data
breakpoints(dif_means_ts_1 ~ 1, breaks = 2 , h=0.1) #one break
breakpoints(dif_means_ts_2 ~ 1, breaks=3, , h=0.1) #two breaks
dif_means_ts_2<-ts(dif_means_2, start=1, end=90) #create time series data with first second and third data
breakpoints(dif_means_ts_2 ~ 1, breaks=3, , h=0.1) #two breaks
plot(dif_means_ts_0)
plot(dif_means_ts_1)
points(30, if_means_ts_1[30,])
points(30, if_means_ts_1[30])
points(30, dif_means_ts_1[30])
points(30, dif_means_ts_1[30], col="purple", pch= 18)
dif_means_ts_2<-ts(dif_means_2, start=1, end=90) #create time series data with first second and third data
breakpoints(dif_means_ts_2 ~ 1, breaks=3, , h=0.1) #two breaks
dif_means_ts_2<-ts(dif_means_2, start=1, end=90) #create time series data with first second and third data
breakpoints(dif_means_ts_2 ~ 1, breaks=3, , h=0.1) #two breaks
plot(dif_means_ts_2)
points(30, dif_means_ts_2[30], col="purple", pch= 18)
points(60, dif_means_ts_2[60], col="purple", pch= 18)
?runif
u = runif(1)
u
u = runif()
?sse
?SSE
#setting up data
first = rnorm(30, mean = 5, sd = 1) #30 random data points from a normal distribution with means 5
#addition attempt
#setting up data
first = rnorm(30, mean = 5, sd = 1) #30 random data points from a normal distribution with means 5
second = rnorm(30, mean = 15, sd = 1)
dif_means = c(first, second) #putting the two generated number list together
time = c(1:60) #making time
test_data = data.frame(time, dif_means) #making a data frame of it
k = c(4,10,15,45,50) #pretending that these are the break points
d = diff(k) #finding te distance between all those break points
location = which.max(d) #finding the location of the farthest distance
min = k[location] #lower bound
max = k[location + 1] #upper bound
new_additon = sample(min:max, 1) #selecting a random number in the correct interval
new_additon
plot(test_data) #plotting the original data
points(new_additon, dif_means[new_additon], col="red", pch= 17) #plotting the new break point
points(k, dif_means[k], col="blue", pch=17) #plotting all the other break points
dif_means_ts_2<-ts(dif_means_2, start=1, end=90) #create time series data with first second and third data
#downloading the strucchange package
install.packages("strucchange")
library("strucchange")
?breakpoints
