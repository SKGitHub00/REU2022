all_k_new = ifelse(all_k_new == clean_max,NA,all_k_new)
all_k_best = ifelse(all_k_best == clean_max,NA,all_k_best)
all_k_new = data.frame(all_k_new[,c(-1,-ncol(all_k_new))], row.names=NULL)
all_k_best = data.frame(all_k_best[,c(-1,-ncol(all_k_best))], row.names=NULL)
colnames(ratio_data) = c("Ratio", "Random", "DeltaBIC", "LikeApprox", "LogQOldNew", "LogQNewOld")
colnames(all_MSE) = "MSE"
colnames(all_BIC) = "BIC"
final.propose = c(a.count, s.count, m.count, j.count)
final.accept = c(add.accept.count, sub.accept.count, move.accept.count, jiggle.accept.count)
#getting distribution of k (number of breakpoints)
num_bkpts = list()
for(i in 1:iterations){
current_k = length(all_k_best[i,][!is.na(all_k_best[i,])])
num_bkpts = c(num_bkpts, current_k, recursive=T)
}
final_list = list(accept_count / iterations, final.propose, final.accept, all_MSE, all_BIC, all_k_best, num_bkpts)
names(final_list) = c("AcceptRate", "ProposedSteps", "AcceptedSteps", "MSE", "BIC", "Breakpoints", "NumBkpts")
return(final_list)
}
current_result = barB(c(30,60), test_data_2[,1], test_data_2[,2], 200, 0.3, 0.01)
current_result$AcceptedSteps
i = which(k_ends_new == sum(k_ends_new) - sum(k_ends))
k_ends_new
k_ends
i = which(k_ends_new == sum(k_ends_new) - sum(k_ends))
d = diff(k_ends)
q1 = ( ( ( (d[i-1])^4  / sum(d)^4) ) * ( 1 / ( d[i-1] - 4 ) ) )
q1
k_ends_new = c(1,30,90)
all_intv = diff(k_ends) #finds all of the intervals
intv_1 = all_intv[-1] #takes the first number off
intv_2 = all_intv[-length(all_intv)] #takes the last number off
sum_intv = intv_1 + intv_2 #finds the sums of the adjacent intervals
i = which(k_ends == abs(sum(k_ends_new) - sum(k_ends))) #finds the location of the point that was deleted
q2 = (1/sum_intv[i-1] ) / (sum(sum_intv))
q2
0.000496537 - 0.000140056
1/5
1/90
k_ends_new = c(1,1000,2000,3000,4000)
k_ends_new = c(1,1000,2000,2500,3000,4000)
k_ends = c(1,1000,2000,3000,4000)
i = which(k_ends_new == sum(k_ends_new) - sum(k_ends))
d = diff(k_ends)
q1 = ( ( ( (d[i-1])^4  / sum(d)^4) ) * ( 1 / ( d[i-1] - 4 ) ) )
q1
k_ends_new = c(1,1000,3000,4000)
all_intv = diff(k_ends) #finds all of the intervals
intv_1 = all_intv[-1] #takes the first number off
intv_2 = all_intv[-length(all_intv)] #takes the last number off
sum_intv = intv_1 + intv_2 #finds the sums of the adjacent intervals
i = which(k_ends == abs(sum(k_ends_new) - sum(k_ends))) #finds the location of the point that was deleted
q2 = (1/sum_intv[i-1] ) / (sum(sum_intv))
q2
3.925862e-06 - 8.334722e-08
log(3.925862e-06) - log(8.334722e-08)
log(0.000496537) - log(0.000140056)
log(3.925862e-06) - log(8.334722e-08)
rm(list=ls())
cat("\014")
setwd("~/REU2018/baar_simulation_data")
data11_j1j0 = readRDS("baar_data11_jump1jigg0.RData")
data11_j25j75 = readRDS("baar_data11_jump25jigg75.RData")
data11_j50j50 = readRDS("baar_data11_jump50jigg50.RData")
data11_j75j25 = readRDS("baar_data11_jump75jiggle25.RData")
data11_j0j1 = readRDS("baar_data11_jump0jigg1.RData")
data1_j1j0 = readRDS("baar_data1_jump1jigg0.RData")
data1_j25j75 = readRDS("baar_data1_jump25jigg75.RData")
data1_j50j50 = readRDS("baar_data1_jump50jigg50.RData")
data1_j75j25 = readRDS("baar_data1_jump75jiggle25.RData")
data1_j0j1 = readRDS("baar_data1_jump0jigg1.RData")
data3_j1j0 = readRDS("baar_data3_jump1jigg0.RData")
data3_j25j75 = readRDS("baar_data3_jump25jigg75.RData")
data3_j50j50 = readRDS("baar_data3_jump50jigg50.RData")
data3_j75j25 = readRDS("baar_data3_jump75jiggle25.RData")
data3_j0j1 = readRDS("baar_data3_jump0jigg1.RData")
data9_j1j0 = readRDS("baar_data9_jump1jigg0.RData")
data9_j25j75 = readRDS("baar_data9_jump25jigg75.RData")
data9_j50j50 = readRDS("baar_data9_jump50jigg50.RData")
data9_j75j25 = readRDS("baar_data9_jump75jiggle25.RData")
data9_j0j1 = readRDS("baar_data9_jump0jigg1.RData")
data9_j0j1$RunTimes
j1j0 = readRDS("baarlr_data3_jump1jigg0.RData")
j25j75 = readRDS("baarlr_data3_jump25jigg75.RData")
j50j50 = readRDS("baarlr_data3_jump50jigg50.RData")
j75j25 = readRDS("baarlr_data3_jump75jiggle25.RData")
j0j1 = readRDS("baarlr_data3_jump0jigg1.RData")
j1j0 = readRDS("baarlr_data3_jump1jigg0.RData")
j25j75 = readRDS("baarlr_data3_jump25jigg75.RData")
j50j50 = readRDS("baarlr_data3_jump50jigg50.RData")
j75j25 = readRDS("baarlr_data3_jump75jiggle25.RData")
j0j1 = readRDS("baarlr_data3_jump0jigg1.RData")
j1j0$RunTimes
m_j1j0 = mean(j1j0$RunTimes)
m_j25j75 = mean(j25j75$RunTimes)
m_j50j50 = mean(j50j50$RunTimes)
m_j75j25 = mean(j75j25$RunTimes)
m_j0j1 = mean(j0j1$RunTimes)
sd_j1j0 = sd(j1j0$RunTimes)
sd_j25j75 = sd(j25j75$RunTimes)
sd_j50j50 = sd(j50j50$RunTimes)
sd_j75j25 = sd(j75j25$RunTimes)
sd_j0j1 = sd(j0j1$RunTimes)
m_j1j0
m_j25j75
m_j50j50
m_j75j25
m_j0j1
sd_j1j0
sd_j25j75
sd_j50j50
sd_j75j25
sd_j0j1
c(m_j1j0 - 2* sd_j1j0 , m_j1j0 + 2* sd_j1j0 )
c(m_j25j75 - 2*sd_j25j75, m_j25j75 + 2*sd_j25j75)
plot(c(m_j1j0 ,m_j25j75 ,m_j50j50 ,m_j75j25 ,m_j0j1 ))
dots(c(1,1),c(m_j1j0 - 2* sd_j1j0 , m_j1j0 + 2* sd_j1j0 ))
points(c(1,1),c(m_j1j0 - 2* sd_j1j0 , m_j1j0 + 2* sd_j1j0 ))
plot(c(m_j1j0 ,m_j25j75 ,m_j50j50 ,m_j75j25 ,m_j0j1 ), ylim=c(0,3))
points(c(1,1),c(m_j1j0 - 2* sd_j1j0 , m_j1j0 + 2* sd_j1j0 ))
points(c(2,2),c(m_j25j75 - 2*sd_j25j75, m_j25j75 + 2*sd_j25j75))
points(c(3,3),c(m_j50j50 - 2*sd_j50j50, m_j50j50 + 2*sd_j50j50))
points(c(4,4),c(m_j75j25 - 2*sd_j75j25, m_j75j25 + 2*sd_j75j25))
points(c(5,5),c(m_j0j1 - 2*sd_j0j1,m_j0j1 - 2*sd_j0j1))
plot(c(m_j1j0 ,m_j25j75 ,m_j50j50 ,m_j75j25 ,m_j0j1 ), ylim=c(0,5))
points(c(1,1),c(m_j1j0 - 2* sd_j1j0 , m_j1j0 + 2* sd_j1j0 ))
points(c(2,2),c(m_j25j75 - 2*sd_j25j75, m_j25j75 + 2*sd_j25j75))
points(c(3,3),c(m_j50j50 - 2*sd_j50j50, m_j50j50 + 2*sd_j50j50))
points(c(4,4),c(m_j75j25 - 2*sd_j75j25, m_j75j25 + 2*sd_j75j25))
points(c(5,5),c(m_j0j1 - 2*sd_j0j1,m_j0j1 - 2*sd_j0j1))
c(m_j1j0 - 2* sd_j1j0 , m_j1j0 + 2* sd_j1j0 )
plot(c(m_j1j0 ,m_j25j75 ,m_j50j50 ,m_j75j25 ,m_j0j1 ), ylim=c(0,5))
points(c(1,1),c(m_j1j0 - 2* sd_j1j0 , m_j1j0 + 2* sd_j1j0 ))
points(c(2,2),c(m_j25j75 - 2*sd_j25j75, m_j25j75 + 2*sd_j25j75))
points(c(3,3),c(m_j50j50 - 2*sd_j50j50, m_j50j50 + 2*sd_j50j50))
points(c(4,4),c(m_j75j25 - 2*sd_j75j25, m_j75j25 + 2*sd_j75j25))
points(c(5,5),c(m_j0j1 - 2*sd_j0j1,m_j0j1 + 2*sd_j0j1))
c(m_j1j0 - 2* sd_j1j0 , m_j1j0 + 2* sd_j1j0 )
m_j1j0
m_j25j75
m_j50j50
m_j75j25
m_j0j1
c(m_j1j0 - 2* sd_j1j0 , m_j1j0 + 2* sd_j1j0 )
c(m_j25j75 - 2*sd_j25j75, m_j25j75 + 2*sd_j25j75)
c(m_j50j50 - 2*sd_j50j50, m_j50j50 + 2*sd_j50j50)
c(m_j75j25 - 2*sd_j75j25, m_j75j25 + 2*sd_j75j25)
c(m_j0j1 - 2*sd_j0j1,m_j0j1 - 2*sd_j0j1)
c(m_j0j1 - 2*sd_j0j1,m_j0j1 + 2*sd_j0j1)
m_j1j0 = mean(j1j0$RunTimes)
m_j25j75 = mean(j25j75$RunTimes)
m_j50j50 = mean(j50j50$RunTimes)
m_j75j25 = mean(j75j25$RunTimes)
m_j0j1 = mean(j0j1$RunTimes)
sd_j1j0 = sd(j1j0$RunTimes)
sd_j25j75 = sd(j25j75$RunTimes)
sd_j50j50 = sd(j50j50$RunTimes)
sd_j75j25 = sd(j75j25$RunTimes)
sd_j0j1 = sd(j0j1$RunTimes)
m_j1j0
m_j25j75
m_j50j50
m_j75j25
m_j0j1
c(m_j1j0 - 2* sd_j1j0 , m_j1j0 + 2* sd_j1j0 )
c(m_j25j75 - 2*sd_j25j75, m_j25j75 + 2*sd_j25j75)
c(m_j50j50 - 2*sd_j50j50, m_j50j50 + 2*sd_j50j50)
c(m_j75j25 - 2*sd_j75j25, m_j75j25 + 2*sd_j75j25)
c(m_j0j1 - 2*sd_j0j1, m_j0j1 + 2*sd_j0j1)
plot(c(m_j1j0 ,m_j25j75 ,m_j50j50 ,m_j75j25 ,m_j0j1 ), ylim=c(0,5))
points(c(1,1),c(m_j1j0 - 2* sd_j1j0 , m_j1j0 + 2* sd_j1j0 ))
points(c(2,2),c(m_j25j75 - 2*sd_j25j75, m_j25j75 + 2*sd_j25j75))
points(c(3,3),c(m_j50j50 - 2*sd_j50j50, m_j50j50 + 2*sd_j50j50))
points(c(4,4),c(m_j75j25 - 2*sd_j75j25, m_j75j25 + 2*sd_j75j25))
points(c(5,5),c(m_j0j1 - 2*sd_j0j1,m_j0j1 + 2*sd_j0j1))
m_j0j1
m_j25j75
m_j50j50
first = rnorm(100, mean = 5, sd = 1)
second = rnorm(100, mean = 15, sd = 1)
third = rnorm(100, mean = 30, sd = 1)
fourth= rnorm(100, mean = 15, sd = 1)
fifth = rnorm(100, mean = 5, sd = 1)
time = c(1:500)
data_2 = c(first, second, third, fourth, fifth)
test_data_2 = data.frame(time, data_2)
data_2 = c(first, second, third, fourth, fifth)
test_data_100 = data.frame(time, data_2)
plot(test_data_100)
first = rnorm(100, mean = 5, sd = 1)
second = rnorm(100, mean = 10, sd = 1)
third = rnorm(100, mean = 15, sd = 1)
fourth= rnorm(100, mean = 10, sd = 1)
fifth = rnorm(100, mean = 5, sd = 1)
six = rnorm(100, mean = 10, sd = 1)
seven = rnorm(100, mean = 15, sd = 1)
eight = rnorm(100, mean = 10, sd = 1)
time = c(1:900)
data_2 = c(first, second, third, fourth, fifth, six, seven, eight, nine)
nine = rnorm(100, mean = 5, sd = 1)
time = c(1:900)
data_2 = c(first, second, third, fourth, fifth, six, seven, eight, nine)
test_data_100 = data.frame(time, data_2)
plot(test_data_100)
first = rnorm(100, mean = 10, sd = 10)
second = rnorm(100, mean = 10, sd = 5)
third = rnorm(100, mean = 10, sd = 1)
fourth= rnorm(100, mean = 10, sd = 10)
fifth = rnorm(100, mean = 10, sd = 5)
six = rnorm(100, mean = 10, sd = 1)
seven = rnorm(100, mean = 10, sd = 10)
eight = rnorm(100, mean = 10, sd = 5)
nine = rnorm(100, mean = 10, sd = 1)
time = c(1:900)
data_200 = c(first, second, third, fourth, fifth, six, seven, eight, nine)
test_data_200 = data.frame(time, data_200)
plot(test_data_200)
first = rnorm(100, mean = 5, sd = 1)
second = rnorm(100, mean = 10, sd = 1)
third = rnorm(100, mean = 15, sd = 1)
fourth= rnorm(100, mean = 10, sd = 1)
fifth = rnorm(100, mean = 5, sd = 1)
six = rnorm(100, mean = 10, sd = 1)
seven = rnorm(100, mean = 15, sd = 1)
eight = rnorm(100, mean = 10, sd = 1)
nine = rnorm(100, mean = 5, sd = 1)
time = c(1:900)
data_100 = c(first, second, third, fourth, fifth, six, seven, eight, nine)
test_data_100 = data.frame(time, data_100)
plot(test_data_100)
setwd("~/REU2018/test_Cases")
j1j0 = readRDS("pelican_jump100.RData")
j25j75 = readRDS("pelican_jump25.RData")
j1j0$RunTimes
j25j75$RunTimes
mean(j1j0$RunTimes)
mean(j25j75$RunTimes)
c(mean(j1j0$RunTimes)- 2*sd(j1j0$RunTimes),mean(j1j0$RunTimes)+ 2*sd(j1j0$RunTimes))
c(mean(j25j75$RunTimes) - 2*sd(j25j75$RunTimes), mean(j25j75$RunTimes) + 2*sd(j25j75$RunTimes))
plot(c(mean(j1j0$RunTimes),mean(j25j75$RunTimes))
c(mean(j1j0$RunTimes)- 2*sd(j1j0$RunTimes),mean(j1j0$RunTimes)+ 2*sd(j1j0$RunTimes))
c(mean(j25j75$RunTimes) - 2*sd(j25j75$RunTimes), mean(j25j75$RunTimes) + 2*sd(j25j75$RunTimes))
plot(c(mean(j1j0$RunTimes),mean(j25j75$RunTimes))
c(mean(j1j0$RunTimes)- 2*sd(j1j0$RunTimes),mean(j1j0$RunTimes)+ 2*sd(j1j0$RunTimes))
c(mean(j25j75$RunTimes) - 2*sd(j25j75$RunTimes), mean(j25j75$RunTimes) + 2*sd(j25j75$RunTimes))
u
plot( c(mean(j1j0$RunTimes),mean(j25j75$RunTimes) ))
plot( c(mean(j1j0$RunTimes),mean(j25j75$RunTimes) ), ylim=c(0,3))
points(c(1,1),c(mean(j1j0$RunTimes)- 2*sd(j1j0$RunTimes),mean(j1j0$RunTimes)+ 2*sd(j1j0$RunTimes)))
points(c(2,2),c(mean(j25j75$RunTimes) - 2*sd(j25j75$RunTimes), mean(j25j75$RunTimes) + 2*sd(j25j75$RunTimes)))
j25j75$ProposedSteps
1891/(2344+97+657+1891)
graphics.off()
rm(list=ls())
cat("\014")
all = readRDS("pelican_alljump25.RData")
setwd("~/REU2018/test_Cases")
all = readRDS("pelican_alljump.RData")
all$RunTimes
plot(all$RunTimes)
plot(all$RunTimes, ylim=c(1,2))
all$NumBkpts
all$NumBkpts[[1]]
plot(all$NumBkpts[[1]])
plot(all$NumBkpts[1])
hist(all$NumBkpts[1])
hist(all$NumBkpts[[1]])
hist(all$NumBkpts[[2]])
hist(all$NumBkpts[[3]])
hist(all$NumBkpts[[6]])
hist(all$NumBkpts[[7]])
hist(all$NumBkpts[[8]])
hist(all$NumBkpts[[9]])
hist(all$NumBkpts[[10]])
hist(all$NumBkpts[[11]])
hist(all$NumBkpts[[12]])
par(mfrow=c(3,4))
hist(all$NumBkpts[[1]])
hist(all$NumBkpts[[2]])
hist(all$NumBkpts[[3]])
hist(all$NumBkpts[[4]])
hist(all$NumBkpts[[5]])
hist(all$NumBkpts[[6]])
hist(all$NumBkpts[[7]])
hist(all$NumBkpts[[8]])
hist(all$NumBkpts[[9]])
hist(all$NumBkpts[[10]])
hist(all$NumBkpts[[11]])
hist(all$NumBkpts[[1]], breaks=(.5,1.5,2.5,3.5,4.5))
hist(all$NumBkpts[[1]], breaks=(.5,1.5,2.5,3.5,4.5))
hist(all$NumBkpts[[1]], breaks=c(.5,1.5,2.5,3.5,4.5))
par(mfrow=c(3,4))
hist(all$NumBkpts[[1]], breaks=c(.5,1.5,2.5,3.5,4.5))
hist(all$NumBkpts[[2]],breaks=c(.5,1.5,2.5,3.5,4.5))
hist(all$NumBkpts[[3]],breaks=c(.5,1.5,2.5,3.5,4.5))
hist(all$NumBkpts[[4]],breaks=c(.5,1.5,2.5,3.5,4.5))
hist(all$NumBkpts[[5]],breaks=c(.5,1.5,2.5,3.5,4.5))
hist(all$NumBkpts[[6]],breaks=c(.5,1.5,2.5,3.5,4.5))
hist(all$NumBkpts[[7]],breaks=c(.5,1.5,2.5,3.5,4.5))
hist(all$NumBkpts[[8]],breaks=c(.5,1.5,2.5,3.5,4.5))
hist(all$NumBkpts[[9]],breaks=c(.5,1.5,2.5,3.5,4.5))
hist(all$NumBkpts[[10]],breaks=c(.5,1.5,2.5,3.5,4.5))
hist(all$NumBkpts[[11]],breaks=c(.5,1.5,2.5,3.5,4.5))
first = rnorm(100, mean = 10, sd = 5)
second = rnorm(100, mean = 10, sd = 10)
data_300 = c(first, second)
time = c(1:200)
test_data_300 = data.frame(time, data_300)
plot(test_data_300)
par(mfrow=c(1,1))
first = rnorm(100, mean = 10, sd = 5)
second = rnorm(100, mean = 10, sd = 10)
data_300 = c(first, second)
time = c(1:200)
test_data_300 = data.frame(time, data_300)
plot(test_data_300)
first = rnorm(100, mean = 10, sd = 1)
second = rnorm(100, mean = 10, sd = 10)
data_300 = c(first, second)
time = c(1:200)
test_data_300 = data.frame(time, data_300)
plot(test_data_300)
first = rnorm(100, mean = 10, sd = 5)
second = rnorm(100, mean = 20, sd = 5)
data_300 = c(first, second)
time = c(1:200)
test_data_300 = data.frame(time, data_300)
plot(test_data_300)
all$Breakpoints[[1]]
all$Breakpoints[[1]][1]
all$Breakpoints[[1]]
all$Breakpoints[[1]][,1]
all$Breakpoints[[1]][1,]
all$Breakpoints[[1]][2,]
c = 0
for(i in 1:length(all$Breakpoints[[1]][1])) {
for(j in i:length(all$Breakpoints[[1]][1])) {
if(all$Breakpoints[[1]][i,] == all$Breakpoints[[1]][j,]) {
c = c +1
}
}
}
all$Breakpoints[[1]][1,] == all$Breakpoints[[1]][2,]
all$Breakpoints[[1]][2,]
all$Breakpoints[[1]][1,]
c = 0
for(i in 1:length(all$Breakpoints[[1]][1])) {
for(j in i:length(all$Breakpoints[[1]][1])) {
if(na.omit(all$Breakpoints[[1]][i,]) == na.omit(all$Breakpoints[[1]][j,])) {
c = c +1
}
}
}
na.omit(all$Breakpoints[[1]][1,]) == na.omit(all$Breakpoints[[1]][2,])
na.omit(all$Breakpoints[[1]][2,])
setwd("/Users/sarah/REU2018/test_Cases")
pelican_alljump = readRDS("pelican_alljump.RData")
lim = 5000
par(mfrow=c(3,4))
for(a in 1:11){
pelican_finbkpts<-NULL
for(i in 1:ncol(pelican_alljump$Breakpoints[[a]])){
pelican_finbkpts<-c(pelican_finbkpts, na.omit(pelican_alljump$Breakpoints[[a]][1:lim,i]), recursive=T)
}
hist(pelican_finbkpts, breaks=seq(0.5,78.5,1), xlim=c(7,19), ylim=c(0,lim), right=F, xlab="Years Since 1939", ylab="Number of Iterations",
main=pelican_alljump$JumpProportion[[a]], col="brown")
}
library(plyr)
unique_jump0<-ddply(pelican_alljump$Breakpoints[[1]][1:500,],.(X1,X2,X3),nrow)
unique_jump0[which.max(unique_jump0[,4]),]
unique_jump100<-ddply(pelican_alljump$Breakpoints[[11]][1:500,],.(X1,X2,X3,X4),nrow)
unique_jump100[which.max(unique_jump100[,5]),]
unique_jump0<-ddply(pelican_alljump$Breakpoints[[1]][1:500,],.(X1,X2,X3),nrow)
unique_jump0[which.max(unique_jump0[,4]),]
unique_jump0<-ddply(pelican_alljump$Breakpoints[[2]][1:500,],.(X1,X2,X3),nrow)
unique_jump0[which.max(unique_jump0[,4]),]
unique_jump0<-ddply(pelican_alljump$Breakpoints[[2]][1:500,],.(X1,X2,X3,X4),nrow)
unique_jump0<-ddply(pelican_alljump$Breakpoints[[2]][1:500,],.(X1,X2,X3),nrow)
unique_jump0[which.max(unique_jump0[,4]),]
unique_jump0<-ddply(pelican_alljump$Breakpoints[[3]][1:500,],.(X1,X2,X3),nrow)
unique_jump0[which.max(unique_jump0[,4]),]
unique_jump0<-ddply(pelican_alljump$Breakpoints[[3]][1:500,],.(X1,X2,X3,X4),nrow)
unique_jump0<-ddply(pelican_alljump$Breakpoints[[3]][1:500,],.(X1,X2,X3),nrow)
unique_jump0[which.max(unique_jump0[,4]),]
unique_jump0<-ddply(pelican_alljump$Breakpoints[[4]][1:500,],.(X1,X2,X3),nrow)
unique_jump0<-ddply(pelican_alljump$Breakpoints[[4]][1:500,],.(X1,X2),nrow)
unique_jump0[which.max(unique_jump0[,4]),]
unique_jump0<-ddply(pelican_alljump$Breakpoints[[4]][1:500,],.(X1,X2),nrow)
unique_jump0[which.max(unique_jump0[,4]),]
unique_jump0[which.max(unique_jump0[,3]),]
unique_jump0<-ddply(pelican_alljump$Breakpoints[[5]][1:500,],.(X1,X2,X3),nrow)
unique_jump0[which.max(unique_jump0[,4]),]
unique_jump0<-ddply(pelican_alljump$Breakpoints[[5]][1:500,],.(X1,X2,X3,X4),nrow)
unique_jump0[which.max(unique_jump0[,4]),]
unique_jump0<-ddply(pelican_alljump$Breakpoints[[6]][1:500,],.(X1,X2,X3),nrow)
unique_jump0<-ddply(pelican_alljump$Breakpoints[[6]][1:500,],.(X1,X2),nrow)
unique_jump0[which.max(unique_jump0[,4]),]
unique_jump0[which.max(unique_jump0[,3]),]
unique_jump0<-ddply(pelican_alljump$Breakpoints[[7]][1:500,],.(X1,X2,X3),nrow)
unique_jump0[which.max(unique_jump0[,4]),]
unique_jump0<-ddply(pelican_alljump$Breakpoints[[8]][1:500,],.(X1,X2,X3),nrow)
unique_jump0[which.max(unique_jump0[,4]),]
unique_jump0<-ddply(pelican_alljump$Breakpoints[[9]][1:500,],.(X1,X2,X3),nrow)
unique_jump0<-ddply(pelican_alljump$Breakpoints[[9]][1:500,],.(X1,X2),nrow)
unique_jump0[which.max(unique_jump0[,4]),]
unique_jump0[which.max(unique_jump0[,3]),]
unique_jump0<-ddply(pelican_alljump$Breakpoints[[10]][1:500,],.(X1,X2,X3),nrow)
unique_jump0[which.max(unique_jump0[,4]),]
unique_jump100<-ddply(pelican_alljump$Breakpoints[[11]][1:500,],.(X1,X2,X3,X4),nrow)
unique_jump100[which.max(unique_jump100[,5]),]
lim = 500
par(mfrow=c(3,4))
for(a in 1:11){
pelican_finbkpts<-NULL
for(i in 1:ncol(pelican_alljump$Breakpoints[[a]])){
pelican_finbkpts<-c(pelican_finbkpts, na.omit(pelican_alljump$Breakpoints[[a]][1:lim,i]), recursive=T)
}
hist(pelican_finbkpts, breaks=seq(0.5,78.5,1), xlim=c(7,19), ylim=c(0,lim), right=F, xlab="Years Since 1939", ylab="Number of Iterations",
main=pelican_alljump$JumpProportion[[a]], col="brown")
}
library(plyr)
unique_jump0<-ddply(pelican_alljump$Breakpoints[[1]][1:500,],.(X1,X2,X3),nrow)
unique_jump0[which.max(unique_jump0[,4]),]
all$AcceptRate
all$AcceptedSteps
all$AcceptedSteps / 5000
all_data3 = readRDS("data3_alljump.RData")
setwd("~/REU2018")
all_data3 = readRDS("data3_alljump.RData")
all_data3$AcceptRate
all_data3$AcceptedSteps / 5000
all_data3$AcceptedSteps
all_data3$ProposedSteps
all_data3$AcceptedSteps
all_data3$ProposedSteps
all_data3$AcceptedSteps / 5000
all$AcceptRate
all$AcceptedSteps / 5000
plot(all$AcceptRate)
par(mfrow=c(1,1))
plot(all$AcceptRate)
graphics.off()
all_data3$AcceptRate
all_data3$AcceptedSteps / 5000
all$AcceptRate
all$AcceptedSteps
all$AcceptedSteps / all$ProposedSteps
first = rnorm(100, mean = 10, sd = 10)
second = rnorm(100, mean = 10, sd = 5)
third = rnorm(100, mean = 10, sd = 1)
first = rnorm(45, mean = 10, sd = 5)
second = rnorm(45, mean = 20, sd = 5)
data_3 = c(first, second)
test_data_3 = data.frame(time, data_3)
time = c(1:90)
test_data_3 = data.frame(time, data_3)
plot(test_data_3)
plot(test_data_3, main = "1 Break, High Variance", xlab="Time", ylab="Dependent Variable")
plot(test_data_3, main = "1 Break, High Variance", xlab="Time", ylab="Dependent Variable", cex = 16)
plot(test_data_3, main = "1 Break, High Variance", xlab="Time", ylab="Dependent Variable", pch =16)
first = rnorm(100, mean = 10, sd = 5)
second = rnorm(100, mean = 20, sd = 5)
data_300 = c(first, second)
time = c(1:200)
test_data_300 = data.frame(time, data_300)
plot(test_data_300)
plot(test_data_300, main = "1 Break, High Variance", xlab="Time", ylab="Dependent Variable", pch =16)
all_data3$Breakpoints[[1]]
plot(test_data_300, main = "One Break, High Variance", xlab="Time", ylab="Dependent Variable", pch =16)
plot(test_data_300, main = "One Break with High Variance", xlab="Time", ylab="Dependent Variable", pch =16)
first = rnorm(100, mean = 10, sd = 5)
second = rnorm(100, mean = 20, sd = 5)
data_300 = c(first, second)
time = c(1:200)
test_data_300 = data.frame(time, data_300)
plot(test_data_300, main = "One Break with High Variance", xlab="Time", ylab="Dependent Variable", pch =16)
first = rnorm(100, mean = 10, sd = 5)
second = rnorm(100, mean = 20, sd = 5)
data_300 = c(first, second)
time = c(1:200)
test_data_300 = data.frame(time, data_300)
plot(test_data_300, main = "One Break with High Variance", xlab="Time", ylab="Dependent Variable", pch =16)
first = rnorm(100, mean = 10, sd = 5)
second = rnorm(100, mean = 20, sd = 5)
data_300 = c(first, second)
time = c(1:200)
test_data_300 = data.frame(time, data_300)
plot(test_data_300, main = "One Break with High Variance", xlab="Time", ylab="Dependent Variable", pch =16)
first = rnorm(100, mean = 10, sd = 5)
second = rnorm(100, mean = 20, sd = 5)
data_300 = c(first, second)
time = c(1:200)
test_data_300 = data.frame(time, data_300)
plot(test_data_300, main = "One Break with High Variance", xlab="Time", ylab="Dependent Variable", pch =16)
first = rnorm(100, mean = 10, sd = 5)
second = rnorm(100, mean = 20, sd = 5)
data_300 = c(first, second)
time = c(1:200)
test_data_300 = data.frame(time, data_300)
plot(test_data_300, main = "One Break with High Variance", xlab="Time", ylab="Dependent Variable", pch =16)
first = rnorm(100, mean = 10, sd = 5)
second = rnorm(100, mean = 20, sd = 5)
data_300 = c(first, second)
time = c(1:200)
test_data_300 = data.frame(time, data_300)
plot(test_data_300, main = "One Break with High Variance", xlab="Time", ylab="Dependent Variable", pch =16)
first = rnorm(100, mean = 10, sd = 5)
second = rnorm(100, mean = 20, sd = 5)
data_300 = c(first, second)
time = c(1:200)
test_data_300 = data.frame(time, data_300)
plot(test_data_300, main = "One Break with High Variance", xlab="Time", ylab="Dependent Variable", pch =16)
